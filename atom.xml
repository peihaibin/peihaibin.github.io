<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  <subtitle>工作日志，自我管理，知识管理，时间管理，阅读写作，思维导图</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://peihaibin.github.io/"/>
  <updated>2017-10-10T02:58:16.201Z</updated>
  <id>https://peihaibin.github.io/</id>
  
  <author>
    <name>peihaibin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>XShell连接 Linux系统显示中文乱码解决</title>
    <link href="https://peihaibin.github.io/2017/10/10/XShell%E8%BF%9E%E6%8E%A5Linux%E7%B3%BB%E7%BB%9F%E6%98%BE%E7%A4%BA%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/"/>
    <id>https://peihaibin.github.io/2017/10/10/XShell连接Linux系统显示中文乱码解决/</id>
    <published>2017-10-10T02:32:03.000Z</published>
    <updated>2017-10-10T02:58:16.201Z</updated>
    
    <content type="html"><![CDATA[<p>XShell是一个强大的安全终端模拟软件，它支持SSH1， SSH2及 Microsoft Windows平台的Telnet NetSarang Xshell 4 Build 0120协议。使用Xshell可以快速方便的管理Linux主机。</p><p>我们在使用时，可能会遇到Linux下显示中文乱码的情况，以下为解决方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost ~]$ df -h</div><div class="line">?.欢绯荤?                 瀹归.  宸茬.  ?.. 宸茬.% ?.浇?</div><div class="line">/dev/mapper/centos-root   17G  3.9G   14G   23% /</div><div class="line">devtmpfs                 473M     0  473M    0% /dev</div><div class="line">tmpfs                    489M     0  489M    0% /dev/shm</div><div class="line">tmpfs                    489M   14M  475M    3% /run</div><div class="line">tmpfs                    489M     0  489M    0% /sys/fs/cgroup</div><div class="line">/dev/sda1               1014M  161M  854M   16% /boot</div></pre></td></tr></table></figure><a id="more"></a><p>查看语言包支持的语言类型，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost ~]$ <span class="built_in">echo</span> <span class="variable">$LANG</span></div><div class="line">zh_CN.UTF-8</div></pre></td></tr></table></figure><p>系统支持中文语言包，显示还为乱码，则应该是Xshell连接工具的问题。<br>打开终端服务，选择菜单—属性，</p><p>找到 ‘终端’的编码设置，选择UTF-8编码格式即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost ~]$ df -h</div><div class="line">文件系统                 容量  已用  可用 已用% 挂载点</div><div class="line">/dev/mapper/centos-root   17G  3.9G   14G   23% /</div><div class="line">devtmpfs                 473M     0  473M    0% /dev</div><div class="line">tmpfs                    489M     0  489M    0% /dev/sh</div><div class="line">tmpfs                    489M   14M  475M    3% /run</div><div class="line">tmpfs                    489M     0  489M    0% /sys/fs</div><div class="line">/dev/sda1               1014M  161M  854M   16% /boot</div><div class="line">tmpfs                     98M   28K   98M    1% /run/us</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;XShell是一个强大的安全终端模拟软件，它支持SSH1， SSH2及 Microsoft Windows平台的Telnet NetSarang Xshell 4 Build 0120协议。使用Xshell可以快速方便的管理Linux主机。&lt;/p&gt;
&lt;p&gt;我们在使用时，可能会遇到Linux下显示中文乱码的情况，以下为解决方法。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hniois@localhost ~]$ df -h&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;?.欢绯荤?                 瀹归.  宸茬.  ?.. 宸茬.% ?.浇?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/dev/mapper/centos-root   17G  3.9G   14G   23% /&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;devtmpfs                 473M     0  473M    0% /dev&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tmpfs                    489M     0  489M    0% /dev/shm&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tmpfs                    489M   14M  475M    3% /run&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tmpfs                    489M     0  489M    0% /sys/fs/cgroup&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/dev/sda1               1014M  161M  854M   16% /boot&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Study" scheme="https://peihaibin.github.io/categories/Study/"/>
    
    
      <category term="XShell" scheme="https://peihaibin.github.io/tags/XShell/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记 8</title>
    <link href="https://peihaibin.github.io/2017/09/29/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-8/"/>
    <id>https://peihaibin.github.io/2017/09/29/Python-学习笔记-8/</id>
    <published>2017-09-29T01:32:03.000Z</published>
    <updated>2017-09-29T02:43:49.700Z</updated>
    
    <content type="html"><![CDATA[<h4 id="python调试"><a href="#python调试" class="headerlink" title="python调试"></a>python调试</h4><p>程序能一次写完并正常运行的概率很小，基本不超过1%。总会有各种各样的bug需要修正。有的bug很简单，看看错误信息就知道，有的bug很复杂，我们需要知道出错时，哪些变量的值是正确的，哪些变量的值是错误的，因此，需要一整套调试程序的手段来修复bug。</p><h5 id="print"><a href="#print" class="headerlink" title="print"></a>print</h5><p>第一种方法简单直接粗暴有效，就是用<font color="#ff0000">print</font>把可能有问题的变量打印出来看看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># err.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></div><div class="line">    n = int(s)</div><div class="line">    <span class="keyword">print</span> <span class="string">'&gt;&gt;&gt; n = %d'</span> % n</div><div class="line">    <span class="keyword">return</span> <span class="number">10</span> / n</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    foo(<span class="string">'0'</span>)</div><div class="line"></div><div class="line">main()</div></pre></td></tr></table></figure><p>用<font color="#ff0000">print</font> 最大的坏处是将来还得删掉它，想想程序里到处都是<font color="#ff0000">print</font>，运行结果也会包含很多垃圾信息。所以，我们又有第二种方法。<br><a id="more"></a></p><h5 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h5><p>凡是用<font color="#ff0000">print</font>来辅助查看的地方，都可以用断言（<font color="#ff0000">assert</font>）来替代：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># err.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></div><div class="line">    n = int(s)</div><div class="line">    <span class="keyword">assert</span> n != <span class="number">0</span>, <span class="string">'n is zero!'</span></div><div class="line">    <span class="keyword">return</span> <span class="number">10</span> / n</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    foo(<span class="string">'0'</span>)</div></pre></td></tr></table></figure><font color="#ff0000">assert</font>的意思是，表达式<strong>n != 0</strong>应该是<strong>True</strong>，否则，后面的代码就会出错。<br><br>如果断言失败，<font color="#ff0000">assert</font>语句本身就会抛出<font color="#ff0000">AssertionError</font>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ python err.py</div><div class="line">Traceback (most recent call last):</div><div class="line">  ...</div><div class="line">AssertionError: n <span class="keyword">is</span> zero!</div></pre></td></tr></table></figure><br><br>程序中如果到处充斥着<font color="#ff0000">assert</font>，和print相比也好不到哪去。不过，启动Python解释器时可以用<font color="#ff0000">-O</font>参数来关闭<font color="#ff0000">assert</font><h5 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h5><p>把<font color="#ff0000">print</font>替换为<font color="#ff0000">logging</font>是第3种方式，和<font color="#ff0000">assert</font>比，<font color="#ff0000">logging</font>不会抛出错误，而且可以输出到文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># err.py</span></div><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line">s = <span class="string">'0'</span></div><div class="line">n = int(s)</div><div class="line">logging.info(<span class="string">'n = %d'</span> % n)</div><div class="line"><span class="keyword">print</span> <span class="number">10</span> / n</div></pre></td></tr></table></figure></p><p><font color="#ff0000">logging.info()</font>就可以输出一段文本。运行，发现除了<font color="#ff0000">ZeroDivisionError</font>，没有任何信息。怎么回事？</p><p>别急，在<font color="#ff0000">import logging</font>之后添加一行配置再试试：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line">logging.basicConfig(level=logging.INFO)</div></pre></td></tr></table></figure></p><p>看到输出了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">INFO:root:n = <span class="number">0</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"err.py"</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    <span class="keyword">print</span> <span class="number">10</span> / n</div><div class="line">ZeroDivisionError: integer division <span class="keyword">or</span> modulo by zero</div></pre></td></tr></table></figure></p><p>这就是<font color="#ff0000">logging</font>的好处，它允许你指定记录信息的级别，有<font color="#ff0000">debug，info，warning，error</font>等几个级别，当我们指定<font color="#ff0000">level=INFO</font>时，<font color="#ff0000">logging.debug</font>就不起作用了。同理，指定<font color="#ff0000">level=WARNING</font>后，<font color="#ff0000">debug</font>和<font color="#ff0000">info</font>就不起作用了。这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。</p><p><font color="#ff0000">logging</font>的另一个好处是通过简单的配置，一条语句可以同时输出到不同的地方，比如console和文件。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;python调试&quot;&gt;&lt;a href=&quot;#python调试&quot; class=&quot;headerlink&quot; title=&quot;python调试&quot;&gt;&lt;/a&gt;python调试&lt;/h4&gt;&lt;p&gt;程序能一次写完并正常运行的概率很小，基本不超过1%。总会有各种各样的bug需要修正。有的bug很简单，看看错误信息就知道，有的bug很复杂，我们需要知道出错时，哪些变量的值是正确的，哪些变量的值是错误的，因此，需要一整套调试程序的手段来修复bug。&lt;/p&gt;
&lt;h5 id=&quot;print&quot;&gt;&lt;a href=&quot;#print&quot; class=&quot;headerlink&quot; title=&quot;print&quot;&gt;&lt;/a&gt;print&lt;/h5&gt;&lt;p&gt;第一种方法简单直接粗暴有效，就是用&lt;font color=&quot;#ff0000&quot;&gt;print&lt;/font&gt;把可能有问题的变量打印出来看看：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# err.py&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    n = int(s)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;gt;&amp;gt;&amp;gt; n = %d&#39;&lt;/span&gt; % n&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; / n&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    foo(&lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;main()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用&lt;font color=&quot;#ff0000&quot;&gt;print&lt;/font&gt; 最大的坏处是将来还得删掉它，想想程序里到处都是&lt;font color=&quot;#ff0000&quot;&gt;print&lt;/font&gt;，运行结果也会包含很多垃圾信息。所以，我们又有第二种方法。&lt;br&gt;
    
    </summary>
    
      <category term="Study" scheme="https://peihaibin.github.io/categories/Study/"/>
    
    
      <category term="python" scheme="https://peihaibin.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记 7</title>
    <link href="https://peihaibin.github.io/2017/09/28/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-7/"/>
    <id>https://peihaibin.github.io/2017/09/28/Python-学习笔记-7/</id>
    <published>2017-09-28T07:23:03.000Z</published>
    <updated>2017-09-28T09:36:00.394Z</updated>
    
    <content type="html"><![CDATA[<h4 id="python输入"><a href="#python输入" class="headerlink" title="python输入"></a>python输入</h4><p>如果要让用户从电脑输入一些字符怎么办？Python提供了一个raw_input，可以让用户输入字符串，并存放到一个变量里。<br>当你输入name = raw_input()并按下回车后，Python交互式命令行就在等待你的输入了。这时，你可以输入任意字符，然后按回车后完成输入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>name = raw_input()</div><div class="line">Michael</div></pre></td></tr></table></figure><p>raw_input可以让你显示一个字符串来提示用户，于是我们把代码改成：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">name = raw_input(<span class="string">'please enter your name: '</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'hello,'</span>, name</div></pre></td></tr></table></figure></p><a id="more"></a><h4 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h4><p>捋一捋ASCII编码和Unicode编码的区别：ASCII编码是1个字节，而Unicode编码通常是2个字节。</p><p>字母A用ASCII编码是十进制的65，二进制的01000001；</p><p>字符0用ASCII编码是十进制的48，二进制的00110000，注意字符’0’和整数0是不同的；</p><p>汉字中已经超出了ASCII编码的范围，用Unicode编码是十进制的20013，二进制的01001110 00101101。</p><p>你可以猜测，如果把ASCII编码的A用Unicode编码，只需要在前面补0就可以，因此，A的Unicode编码是00000000 01000001。</p><p>新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。<br>但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。</p><p>所以，本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。<br>UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:left">ASCII</th><th style="text-align:left">Unicode</th><th style="text-align:left">UTF-8</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:left">01000001</td><td style="text-align:left">00000000 01000001</td><td style="text-align:left">01000001</td></tr><tr><td style="text-align:center">中</td><td style="text-align:left">x</td><td style="text-align:left">01001110 00101101</td><td style="text-align:left">11100100 10111000 10101101</td></tr></tbody></table><p>从上面的表格还可以发现，UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。</p><p>搞清楚了ASCII、Unicode和UTF-8的关系，我们就可以总结一下现在计算机系统通用的字符编码工作方式：</p><p>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。</p><p>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：<br><img src="/img/0.png" alt="字符编码工作方式" title="字符编码工作方式图"></p><p>浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器：<br><img src="/img/1.png" alt="网页工作方式" title="网页字符编码工作方式图"></p><h4 id="python中-iter"><a href="#python中-iter" class="headerlink" title="python中__iter__"></a>python中__iter__</h4><p>如果一个类想被用于<font color="#ff0000">for … in</font>循环，类似list或tuple那样，就必须实现一个<font color="#ff0000">__iter__()</font>方法，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的next()方法拿到循环的下一个值，直到遇到StopIteration错误时退出循环。</p><p>以斐波那契数列为例，写一个Fib类，可以作用于for循环：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.a, self.b = <span class="number">0</span>, <span class="number">1</span> <span class="comment"># 初始化两个计数器a，b</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self <span class="comment"># 实例本身就是迭代对象，故返回自己</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></div><div class="line">        self.a, self.b = self.b, self.a + self.b <span class="comment"># 计算下一个值</span></div><div class="line">        <span class="keyword">if</span> self.a &gt; <span class="number">100</span>: <span class="comment"># 退出循环的条件</span></div><div class="line">            <span class="keyword">raise</span> StopIteration();</div><div class="line">        <span class="keyword">return</span> self.a <span class="comment"># 返回下一个值</span></div></pre></td></tr></table></figure></p><h4 id="python中-getitem"><a href="#python中-getitem" class="headerlink" title="python中 __getitem__"></a>python中 __getitem__</h4><p>Fib实例虽然能作用于for循环，看起来和list有点像，但是，把它当成list来使用还是不行，比如，取第5个元素：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>Fib()[<span class="number">5</span>]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: <span class="string">'Fib'</span> object does <span class="keyword">not</span> support indexing</div></pre></td></tr></table></figure></p><p>要表现得像list那样按照下标取出元素，需要实现<font color="#ff0000">__getitem__()</font>方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, n)</span>:</span></div><div class="line">        a, b = <span class="number">1</span>, <span class="number">1</span></div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(n):</div><div class="line">            a, b = b, a + b</div><div class="line">        <span class="keyword">return</span> a</div></pre></td></tr></table></figure></p><p>现在，就可以按下标访问数列的任意一项了。<br>但是list有个神奇的切片方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">100</span>)[<span class="number">5</span>:<span class="number">10</span>]</div><div class="line">[<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</div></pre></td></tr></table></figure></p><p>对于Fib却报错。原因是<font color="#ff0000">__getitem__()</font>传入的参数可能是一个int，也可能是一个切片对象<font color="#ff0000">slice</font>，所以要做判断：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, n)</span>:</span></div><div class="line">        <span class="keyword">if</span> isinstance(n, int):</div><div class="line">            a, b = <span class="number">1</span>, <span class="number">1</span></div><div class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(n):</div><div class="line">                a, b = b, a + b</div><div class="line">            <span class="keyword">return</span> a</div><div class="line">        <span class="keyword">if</span> isinstance(n, slice):</div><div class="line">            start = n.start</div><div class="line">            stop = n.stop</div><div class="line">            a, b = <span class="number">1</span>, <span class="number">1</span></div><div class="line">            L = []</div><div class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(stop):</div><div class="line">                <span class="keyword">if</span> x &gt;= start:</div><div class="line">                    L.append(a)</div><div class="line">                a, b = b, a + b</div><div class="line">            <span class="keyword">return</span> L</div></pre></td></tr></table></figure></p><p>但是没有对step参数作处理：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f[:<span class="number">10</span>:<span class="number">2</span>]</div><div class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>]</div></pre></td></tr></table></figure></p><p>也没有对负数作处理，所以，要正确实现一个<font color="#ff0000">__getitem__()</font>还是有很多工作要做的。</p><p>此外，如果把对象看成<font color="#ff0000">dict，__getitem__()</font>的参数也可能是一个可以作key的object，例如str。</p><p>与之对应的是<font color="#ff0000">__setitem__()</font>方法，把对象视作list或dict来对集合赋值。最后，还有一个<font color="#ff0000"><strong>delitem</strong>()</font>方法，用于删除某个元素。</p><p>总之，通过上面的方法，我们自己定义的类表现得和Python自带的list、tuple、dict没什么区别，这完全归功于动态语言的“鸭子类型”，不需要强制继承某个接口。</p><h4 id="python中-getattr"><a href="#python中-getattr" class="headerlink" title="python中 __getattr__"></a>python中 __getattr__</h4><p>正常情况下，当我们调用类的方法或属性时，如果不存在，就会报错。比如定义<strong>Student</strong>类：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.name = <span class="string">'Michael'</span></div></pre></td></tr></table></figure></p><p>调用<strong>name</strong>属性，没问题，但是，调用不存在的<strong>score</strong>属性，就有问题了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> s.name</div><div class="line">Michael</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> s.score</div><div class="line">Traceback (most recent call last):</div><div class="line">  ...</div><div class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'score'</span></div></pre></td></tr></table></figure></p><p>错误信息很清楚地告诉我们，没有找到<strong>score</strong>这个attribute。</p><p>要避免这个错误，除了可以加上一个<strong>score</strong>属性外，Python还有另一个机制，那就是写一个<font color="#ff0000">__getattr__()</font>方法，动态返回一个属性。修改如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.name = <span class="string">'Michael'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span></div><div class="line">        <span class="keyword">if</span> attr==<span class="string">'score'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">99</span></div></pre></td></tr></table></figure></p><p>当调用不存在的属性时，比如<strong>score</strong>，Python解释器会试图调用<font color="#ff0000">__getattr__(self, ‘score’)</font>来尝试获得属性，这样，我们就有机会返回<strong>score</strong>的值。</p><p>注意，只有在没有找到属性的情况下，才调用<font color="#ff0000">__getattr__</font>，已有的属性，比如<strong>name</strong>，不会在<font color="#ff0000">__getattr__</font>中查找。</p><p>此外，注意到任意调用如s.abc都会返回None，这是因为我们定义的<font color="#ff0000">__getattr__</font>默认返回就是None。要让class只响应特定的几个属性，我们就要按照约定，抛出AttributeError的错误：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">raise</span> AttributeError(<span class="string">'\'Student\' object has no attribute \'%s\''</span> % attr)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;python输入&quot;&gt;&lt;a href=&quot;#python输入&quot; class=&quot;headerlink&quot; title=&quot;python输入&quot;&gt;&lt;/a&gt;python输入&lt;/h4&gt;&lt;p&gt;如果要让用户从电脑输入一些字符怎么办？Python提供了一个raw_input，可以让用户输入字符串，并存放到一个变量里。&lt;br&gt;当你输入name = raw_input()并按下回车后，Python交互式命令行就在等待你的输入了。这时，你可以输入任意字符，然后按回车后完成输入。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;name = raw_input()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Michael&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;raw_input可以让你显示一个字符串来提示用户，于是我们把代码改成：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;name = raw_input(&lt;span class=&quot;string&quot;&gt;&#39;please enter your name: &#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;hello,&#39;&lt;/span&gt;, name&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="https://peihaibin.github.io/categories/Study/"/>
    
    
      <category term="python" scheme="https://peihaibin.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记 6</title>
    <link href="https://peihaibin.github.io/2017/09/28/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-6/"/>
    <id>https://peihaibin.github.io/2017/09/28/Python-学习笔记-6/</id>
    <published>2017-09-28T05:20:03.000Z</published>
    <updated>2017-09-28T07:22:52.997Z</updated>
    
    <content type="html"><![CDATA[<h4 id="python中数学运算"><a href="#python中数学运算" class="headerlink" title="python中数学运算"></a>python中数学运算</h4><p>Python 提供的基本数据类型 <strong>int、float</strong> 可以做整数和浮点的四则运算以及乘方等运算。<br>但是，四则运算不局限于int和float，还可以是有理数、矩阵等。<br>要表示有理数，可以用一个<strong>Rational</strong>类来表示：<br>如果要让<strong>Rational</strong>进行<strong>+运算</strong>，需要正确实现__add__。</p><p>请继续完善Rational类，实现四则运算。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#--*-- coding=utf-8 --*--</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span><span class="params">(object)</span>:</span>  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(self,a,b)</span>:</span></div><div class="line">        <span class="keyword">while</span> b:</div><div class="line">            a,b=b,a%b</div><div class="line">        <span class="keyword">return</span> a</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, p, q)</span>:</span></div><div class="line">        self.p = p/self.gcd(p,q)</div><div class="line">        self.q = q/self.gcd(p,q)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, r)</span>:</span></div><div class="line">        <span class="keyword">return</span> Rational(self.p * r.q + self.q * r.p, self.q * r.q)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sub__</span><span class="params">(self, r)</span>:</span></div><div class="line">        <span class="keyword">return</span> Rational(self.p*r.q - self.q * r.p, self.q * r.q)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__mul__</span><span class="params">(self, r)</span>:</span></div><div class="line">        <span class="keyword">return</span> Rational(self.p*r.p,self.q*r.q)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__div__</span><span class="params">(self, r)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.q*r.p == <span class="number">0</span>:a</div><div class="line">            <span class="keyword">return</span> <span class="string">'error'</span></div><div class="line">        <span class="keyword">return</span> Rational(self.p*r.q,self.q*r.p)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'%s/%s'</span> % (self.p, self.q)</div><div class="line">    __repr__ = __str__</div><div class="line">      </div><div class="line">r1 = Rational(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line">r2 = Rational(<span class="number">1</span>, <span class="number">4</span>)</div><div class="line"><span class="keyword">print</span> r1 + r2</div><div class="line"><span class="keyword">print</span> r1 - r2</div><div class="line"><span class="keyword">print</span> r1 * r2</div><div class="line"><span class="keyword">print</span> r1 / r2</div></pre></td></tr></table></figure></p><a id="more"></a><h4 id="python中类型转换"><a href="#python中类型转换" class="headerlink" title="python中类型转换"></a>python中类型转换</h4><p><strong>Rational</strong>类实现了有理数运算，但是，如果要把结果转为<strong> int</strong> 或 <strong>float </strong>怎么办？<br>如果要把<strong> Rational</strong> 转为 <strong>int</strong>，应该使用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">r = Rational(<span class="number">12</span>, <span class="number">5</span>)</div><div class="line">n = int(r)</div></pre></td></tr></table></figure><br>要让<strong>int()</strong>函数正常工作，需要实现特殊方法<font color="#ff0000">__int__()</font>。<br>同理，要让<strong>float()</strong>函数正常工作，需要实现特殊方法<strong>__float__()</strong>。</p><p>继续完善Rational，使之可以转型为float。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, p, q)</span>:</span></div><div class="line">        self.p = p</div><div class="line">        self.q = q</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__int__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.p // self.q</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__float__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> float(self.p) / self.q</div><div class="line"></div><div class="line"><span class="keyword">print</span> float(Rational(<span class="number">7</span>, <span class="number">2</span>))</div><div class="line"><span class="keyword">print</span> float(Rational(<span class="number">1</span>, <span class="number">3</span>))</div></pre></td></tr></table></figure></p><h4 id="python中-property"><a href="#python中-property" class="headerlink" title="python中 @property"></a>python中 @property</h4><p>使用 <strong>get/set</strong> 方法来封装对一个属性的访问在许多面向对象编程的语言中都很常见。<br>但是写 <strong>s.get_score()</strong> 和 <strong>s.set_score()</strong> 没有直接写 <strong>s.score </strong>来得直接。<br>有没有两全其美的方法？—-有。</p><p>因为Python支持高阶函数，在函数式编程中我们介绍了装饰器函数，可以用装饰器函数把 <strong>get/set </strong>方法“装饰”成属性调用。</p><p>给Student类加一个grade属性，根据 score 计算 A（&gt;=80）、B、C（<60） <figure="" class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.__score = score</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__score</div><div class="line"></div><div class="line"><span class="meta">    @score.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self, score)</span>:</span></div><div class="line">        <span class="keyword">if</span> score &lt; <span class="number">0</span> <span class="keyword">or</span> score &gt; <span class="number">100</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'invalid score'</span>)</div><div class="line">        self.__score = score</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grade</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.__score &gt;=<span class="number">80</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">'A'</span></div><div class="line">        <span class="keyword">elif</span> self.__score &gt;=<span class="number">60</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">'B'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">'C'</span></div><div class="line"></div><div class="line">s = Student(<span class="string">'Bob'</span>, <span class="number">59</span>)</div><div class="line"><span class="keyword">print</span> s.grade</div><div class="line"></div><div class="line">s.score = <span class="number">60</span></div><div class="line"><span class="keyword">print</span> s.grade</div><div class="line"></div><div class="line">s.score = <span class="number">99</span></div><div class="line"><span class="keyword">print</span> s.grade</div></pre></td></tr></table></60）></p><h4 id="python中-slots"><a href="#python中-slots" class="headerlink" title="python中 __slots__"></a>python中 __slots__</h4><p>由于Python是动态语言，任何实例在运行期都可以动态地添加属性。</p><p>如果要限制添加的属性，例如，Student类只允许添加 name、gender和score 这3个属性，就可以利用Python的一个特殊的<strong>__slots__</strong>来实现。<br><strong>__slots__</strong>的目的是限制当前类所能拥有的属性，如果不需要添加任意动态的属性，<br>使用<strong>__slots__</strong>也能节省内存。</p><p>使用<strong>__slots__</strong>要注意，<strong>__slots__</strong>定义的属性仅对当前类起作用，对继承的子类是不起作用的，<br>除非在子类中也定义<strong>__slots__</strong>，这样，子类允许定义的属性就是自身的<strong>__slots__</strong>加上父类的<strong>__slots__</strong>。</p><p>继承中的__slots__<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    __slots__ = (<span class="string">'name'</span>, <span class="string">'gender'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.gender = gender</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></div><div class="line"></div><div class="line">    __slots__ = (<span class="string">'score'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,gender,score)</span>:</span></div><div class="line">        super(Student,self).__init__(name,gender)</div><div class="line">        self.score = score</div><div class="line"></div><div class="line">s = Student(<span class="string">'Bob'</span>, <span class="string">'male'</span>, <span class="number">59</span>)</div><div class="line">s.name = <span class="string">'Tim'</span></div><div class="line">s.score = <span class="number">99</span></div><div class="line"><span class="keyword">print</span> s.score</div></pre></td></tr></table></figure></p><h4 id="python中-call"><a href="#python中-call" class="headerlink" title="python中 __call__"></a>python中 __call__</h4><p>在Python中，函数其实是一个对象。<br>所有的函数都是可调用对象。</p><p>一个类实例也可以变成一个可调用对象，只需要实现一个特殊方法<strong>__call__()</strong>。</p><p>改进一下前面定义的斐波那契数列，加一个<strong>__call__</strong>方法，让调用更简单：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self,num)</span>:</span></div><div class="line">        self.num = num</div><div class="line">        self.fib = []</div><div class="line">        <span class="keyword">if</span> self.num == <span class="number">0</span>:</div><div class="line">            <span class="keyword">print</span> str(num) + <span class="string">' is not correct!'</span></div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">elif</span> self.num == <span class="number">1</span>:</div><div class="line">            self.fib.append(<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.fib.append(<span class="number">0</span>)</div><div class="line">            self.fib.append(<span class="number">1</span>)</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,self.num):</div><div class="line">                self.fib.append(self.fib[i<span class="number">-1</span>] + self.fib[i<span class="number">-2</span>])</div><div class="line">        <span class="keyword">return</span> self.fib</div><div class="line">        </div><div class="line">f = Fib()</div><div class="line"><span class="keyword">print</span> f(<span class="number">10</span>)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;python中数学运算&quot;&gt;&lt;a href=&quot;#python中数学运算&quot; class=&quot;headerlink&quot; title=&quot;python中数学运算&quot;&gt;&lt;/a&gt;python中数学运算&lt;/h4&gt;&lt;p&gt;Python 提供的基本数据类型 &lt;strong&gt;int、float&lt;/strong&gt; 可以做整数和浮点的四则运算以及乘方等运算。&lt;br&gt;但是，四则运算不局限于int和float，还可以是有理数、矩阵等。&lt;br&gt;要表示有理数，可以用一个&lt;strong&gt;Rational&lt;/strong&gt;类来表示：&lt;br&gt;如果要让&lt;strong&gt;Rational&lt;/strong&gt;进行&lt;strong&gt;+运算&lt;/strong&gt;，需要正确实现__add__。&lt;/p&gt;
&lt;p&gt;请继续完善Rational类，实现四则运算。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#--*-- coding=utf-8 --*--&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Rational&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;gcd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self,a,b)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; b:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            a,b=b,a%b&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, p, q)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.p = p/self.gcd(p,q)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.q = q/self.gcd(p,q)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__add__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, r)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Rational(self.p * r.q + self.q * r.p, self.q * r.q)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__sub__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, r)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Rational(self.p*r.q - self.q * r.p, self.q * r.q)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__mul__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, r)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Rational(self.p*r.p,self.q*r.q)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__div__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, r)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; self.q*r.p == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:a&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Rational(self.p*r.q,self.q*r.p)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;%s/%s&#39;&lt;/span&gt; % (self.p, self.q)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    __repr__ = __str__&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;r1 = Rational(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;r2 = Rational(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; r1 + r2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; r1 - r2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; r1 * r2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; r1 / r2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="https://peihaibin.github.io/categories/Study/"/>
    
    
      <category term="python" scheme="https://peihaibin.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记 5</title>
    <link href="https://peihaibin.github.io/2017/09/28/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-5/"/>
    <id>https://peihaibin.github.io/2017/09/28/Python-学习笔记-5/</id>
    <published>2017-09-28T01:48:03.000Z</published>
    <updated>2017-09-28T05:15:26.357Z</updated>
    
    <content type="html"><![CDATA[<h4 id="python中继承一个类"><a href="#python中继承一个类" class="headerlink" title="python中继承一个类"></a>python中继承一个类</h4><p>一定要用 <font color="#ff0000">super(子类名, self).__init__(父类属性1, 父类属性2) </font>去初始化父类，否则，继承自 <b>父类</b> 的 <b>子类</b> 将没有 <b>父类属性</b>。<br>函数<b>super(子类名, self)</b>将返回当前类继承的父类，然后调用<b>__init__()</b>方法，<br>注意<font color="#ff0000">self参数已在super()中传入，在__init__()中将隐式传递，不需要写出（也不能写）</font>。</p><p>python中继承一个类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.gender = gender</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(Person)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, course)</span>:</span></div><div class="line">        super(Teacher,self).__init__(name,gender)</div><div class="line">        self.course = course</div><div class="line"></div><div class="line">t = Teacher(<span class="string">'Alice'</span>, <span class="string">'Female'</span>, <span class="string">'English'</span>)</div><div class="line"><span class="keyword">print</span> t.name</div><div class="line"><span class="keyword">print</span> t.course</div></pre></td></tr></table></figure></p><a id="more"></a><h4 id="python中判断类型"><a href="#python中判断类型" class="headerlink" title="python中判断类型"></a>python中判断类型</h4><p>函数<b>isinstance()</b>可以判断一个变量的类型，既可以用在Python内置的数据类型如<b>str、list、dict</b>，也可以用在我们自定义的类，它们本质上都是数据类型。<br>在继承链上，一个父类的实例不能是子类类型，因为子类比父类多了一些属性和方法。<br>在一条继承链上，一个实例可以看成它本身的类型，也可以看成它父类的类型。</p><h4 id="python中多态"><a href="#python中多态" class="headerlink" title="python中多态"></a>python中多态</h4><p>类具有继承关系，并且子类类型可以向上转型看做父类类型，如果我们从 <b>父类</b> 派生出<b>子类1</b>和<b>子类2</b>，并都写了一个 <b>whoAmI()</b> 方法：<br>在一个函数中，如果我们接收一个变量 <b>x</b>，则无论该 <b>x</b> 是 <b>父类</b> 、<b>子类1</b>还是 <b>子类2</b>，都可以正确打印出结果。<br>这种行为称为多态。也就是说，方法调用将作用在 <b>x</b> 的实际类型上。<br>子类总是先查找它自身的定义，如果没有定义，则顺着继承链向上查找，直到在某个父类中找到为止。<br>由于Python是动态语言，所以，传递给函数 <b>who_am_i(x)</b>的参数 <b>x</b> 不一定是 <b>父类</b> 或 <b>父类</b>的子类型。任何数据类型的实例都可以，只要它有一个<b>whoAmI()</b>的方法即可。<br>这是动态语言和静态语言（例如Java）最大的差别之一。动态语言调用实例方法，不检查类型，只要方法存在，参数正确，就可以调用。</p><p>尝试编写一个File-like Object<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span><span class="params">(object)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">r'["Tim", "Bob", "Alice"]'</span></div><div class="line">s = Students()</div><div class="line"></div><div class="line"><span class="keyword">print</span> json.load(s)</div></pre></td></tr></table></figure></p><h4 id="python中多重继承"><a href="#python中多重继承" class="headerlink" title="python中多重继承"></a>python中多重继承</h4><p>除了从一个父类继承外，Python允许从多个父类继承，称为多重继承。</p><p><b>多重继承的目的</b>是从两种继承树中分别选择并继承出子类，以便组合功能使用。</p><p>通过多重继承，请定义“会打篮球的学生”和“会踢足球的老师”。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'init Person'</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(Student,self).__init__()</div><div class="line">        <span class="keyword">print</span> <span class="string">'init Student'</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(Person)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(Teacher,self).__init__()</div><div class="line">        <span class="keyword">print</span> <span class="string">'init Teacher'</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SkillMixin</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'init SkillMixin'</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasketballMixin</span><span class="params">(SkillMixin)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">skill</span><span class="params">(self)</span>:</span></div><div class="line">        super(BasketballMixin,self).__init__()</div><div class="line">        <span class="keyword">return</span> <span class="string">'basketball'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FootballMixin</span><span class="params">(SkillMixin)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">skill</span><span class="params">(self)</span>:</span></div><div class="line">        super(FootballMixin,self).__init__()</div><div class="line">        <span class="keyword">return</span> <span class="string">'football'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BStudent</span><span class="params">(Student,BasketballMixin)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FTeacher</span><span class="params">(Teacher,FootballMixin)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">s = BStudent()</div><div class="line"><span class="keyword">print</span> s.skill()</div><div class="line"></div><div class="line">t = FTeacher()</div><div class="line"><span class="keyword">print</span> t.skill()</div></pre></td></tr></table></figure></p><h4 id="python中获取对象信息"><a href="#python中获取对象信息" class="headerlink" title="python中获取对象信息"></a>python中获取对象信息</h4><p><font color="#ff0000">当实例属性和类属性重名时，实例属性优先级高</font>，它将屏蔽掉对类属性的访问。<br>可见，千万不要在实例上修改类属性，它实际上并没有修改类属性，而是给实例绑定了一个实例属性。</p><h4 id="python中定义实例方法"><a href="#python中定义实例方法" class="headerlink" title="python中定义实例方法"></a>python中定义实例方法</h4><p>拿到一个变量，除了用 <strong>isinstance()</strong> 判断它是否是某种类型的实例外，还有没有别的方法获取到更多的信息呢？</p><ul><li>首先可以用<strong> type()</strong> 函数获取变量的类型，它返回一个 <strong>Type</strong> 对象。</li><li>其次，可以用 <strong>dir() </strong>函数获取变量的所有属性。<ul><li>对于实例变量，<strong>dir()</strong>返回所有实例属性，包括<strong><code>\_\_class\_\_</code></strong>这类有特殊意义的属性</li><li>如何去掉<code>\_\_xxx\_\_</code>这类的特殊属性，只保留我们自己定义的属性？回顾一下filter()函数的用法。</li><li>dir()返回的属性是字符串列表，如果已知一个属性名称，要获取或者设置对象的属性，就需要用 getattr() 和 setattr( )函数了。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, **kw)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.gender = gender</div><div class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> kw.iteritems():</div><div class="line">            setattr(self,k,v)</div><div class="line"></div><div class="line">p = Person(<span class="string">'Bob'</span>, <span class="string">'Male'</span>, age=<span class="number">18</span>, course=<span class="string">'Python'</span>)</div><div class="line"><span class="keyword">print</span> p.age</div><div class="line"><span class="keyword">print</span> p.course</div></pre></td></tr></table></figure><h4 id="Python中的特殊方法"><a href="#Python中的特殊方法" class="headerlink" title="Python中的特殊方法"></a>Python中的特殊方法</h4><h5 id="python中-str-和-repr"><a href="#python中-str-和-repr" class="headerlink" title="python中 __str__和__repr__"></a>python中 __str__和__repr__</h5><p>如果要把一个类的实例变成 str，就需要实现特殊方法<font color="#ff0000">__str__()</font>：<br> Python 定义了<strong>__str__()</strong>和<strong>__repr__()</strong>两种方法，<font color="#ff0000">__str__()</font>用于显示给用户，而<strong>__repr__()</strong>用于显示给开发人员。</p><p> 请给Student 类定义__str__和__repr__方法，使得能打印出<student: name,="" gender,="" score="">：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.gender = gender</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, score)</span>:</span></div><div class="line">        super(Student, self).__init__(name, gender)</div><div class="line">        self.score = score</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'(Student: %s, %s, %s)'</span> %(self.name,self.gender,self.score)</div><div class="line">    __repr__ = __str__</div><div class="line"></div><div class="line">s = Student(<span class="string">'Bob'</span>, <span class="string">'male'</span>, <span class="number">88</span>)</div><div class="line"><span class="keyword">print</span> s</div></pre></td></tr></table></figure></student:></p><h5 id="python中-cmp"><a href="#python中-cmp" class="headerlink" title="python中 __cmp__"></a>python中 __cmp__</h5><p>对<strong> int、str </strong>等内置数据类型排序时，Python的 <strong>sorted()</strong> 按照默认的比较函数 <strong>cmp</strong> 排序，但是，如果对一组 Student 类的实例排序时，就必须提供我们自己的特殊方法 <strong>__cmp__()</strong>。</p><p>请修改 Student 的 __cmp__ 方法，让它按照分数从高到底排序，分数相同的按名字排序。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.score = score</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'(%s: %s)'</span> % (self.name, self.score)</div><div class="line"></div><div class="line">    __repr__ = __str__</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__cmp__</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.score &lt; s.score:</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> self.score &gt; s.score:</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> self.name &lt; s.name:</div><div class="line">                <span class="keyword">return</span> <span class="number">-1</span> </div><div class="line">            <span class="keyword">elif</span> self.name &gt; s.name:</div><div class="line">                <span class="keyword">return</span> <span class="number">1</span></div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line">L = [Student(<span class="string">'Tim'</span>, <span class="number">99</span>), Student(<span class="string">'Bob'</span>, <span class="number">88</span>), Student(<span class="string">'Alice'</span>, <span class="number">99</span>)]</div><div class="line"><span class="keyword">print</span> sorted(L)</div></pre></td></tr></table></figure></p><h5 id="python中-len"><a href="#python中-len" class="headerlink" title="python中 __len__"></a>python中 __len__</h5><p>如果一个类表现得像一个list，要获取有多少个元素，就得用<strong> len()</strong> 函数。<br>要让<strong> len() </strong>函数工作正常，类必须提供一个特殊方法<font color="#ff0000">__len__()</font>，它返回元素的个数。<br>只要正确实现了<strong>__len__()</strong>方法，就可以用<strong>len()</strong>函数返回<strong>类实例</strong>的“长度”。</p><p>请编写一个Fib类，Fib(10)表示数列的前10个元素，print Fib(10) 可以打印出数列的前 10 个元素，len(Fib(10))可以正确返回数列的个数10。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num)</span>:</span></div><div class="line">        self.num = num</div><div class="line">        self.fib = []</div><div class="line">        <span class="keyword">if</span> self.num == <span class="number">0</span>:</div><div class="line">            <span class="keyword">print</span> str(num) + <span class="string">' is not correct!'</span></div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">elif</span> self.num == <span class="number">1</span>:</div><div class="line">            self.fib.append(<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.fib.append(<span class="number">0</span>)</div><div class="line">            self.fib.append(<span class="number">1</span>)</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,self.num):</div><div class="line">                self.fib.append(self.fib[i<span class="number">-1</span>] + self.fib[i<span class="number">-2</span>])</div><div class="line">                <span class="comment">#return fib</span></div><div class="line">        <span class="keyword">return</span> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> str(self.fib)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> len(self.fib)</div><div class="line"></div><div class="line">f = Fib(<span class="number">10</span>)</div><div class="line"><span class="keyword">print</span> f</div><div class="line"><span class="keyword">print</span> len(f)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;python中继承一个类&quot;&gt;&lt;a href=&quot;#python中继承一个类&quot; class=&quot;headerlink&quot; title=&quot;python中继承一个类&quot;&gt;&lt;/a&gt;python中继承一个类&lt;/h4&gt;&lt;p&gt;一定要用 &lt;font color=&quot;#ff0000&quot;&gt;super(子类名, self).__init__(父类属性1, 父类属性2) &lt;/font&gt;去初始化父类，否则，继承自 &lt;b&gt;父类&lt;/b&gt; 的 &lt;b&gt;子类&lt;/b&gt; 将没有 &lt;b&gt;父类属性&lt;/b&gt;。&lt;br&gt;函数&lt;b&gt;super(子类名, self)&lt;/b&gt;将返回当前类继承的父类，然后调用&lt;b&gt;__init__()&lt;/b&gt;方法，&lt;br&gt;注意&lt;font color=&quot;#ff0000&quot;&gt;self参数已在super()中传入，在__init__()中将隐式传递，不需要写出（也不能写）&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;python中继承一个类&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, name, gender)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.name = name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.gender = gender&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Teacher&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Person)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, name, gender, course)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        super(Teacher,self).__init__(name,gender)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.course = course&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;t = Teacher(&lt;span class=&quot;string&quot;&gt;&#39;Alice&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Female&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;English&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; t.name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; t.course&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="https://peihaibin.github.io/categories/Study/"/>
    
    
      <category term="python" scheme="https://peihaibin.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记 4</title>
    <link href="https://peihaibin.github.io/2017/09/27/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-4/"/>
    <id>https://peihaibin.github.io/2017/09/27/Python-学习笔记-4/</id>
    <published>2017-09-27T07:44:03.000Z</published>
    <updated>2017-09-28T01:47:55.561Z</updated>
    
    <content type="html"><![CDATA[<h4 id="python中初始化实例属性"><a href="#python中初始化实例属性" class="headerlink" title="python中初始化实例属性"></a>python中初始化实例属性</h4><p>虽然我们可以自由地给一个实例绑定各种属性，但是，现实世界中，一种类型的实例应该拥有相同名字的属性。<br>特殊的<font color="#ff0000"><strong>init</strong>()</font> 方法：<br>当创建实例时，<strong>init</strong>()方法被自动调用，我们就能在此为每个实例都统一加上属性。</p><p><font color="#ff0000"><strong>init</strong>()</font>  方法的第一个参数必须是self（也可以用别的名字，但建议使用习惯用法），后续参数则可以自由指定，和定义函数没有任何区别。<br>相应地，创建实例时，就必须要提供除 self 以外的参数。<br>要特别注意的是，初学者定义<strong>init</strong>()方法常常忘记了 self 参数，这会导致创建失败或运行不正常，因为第一个参数被Python解释器传入了实例的引用，从而导致整个方法的调用参数位置全部没有对上。</p><p>定义Person类的<strong>init</strong>方法，除了接受 name、gender 和 birth 外，还可接受任意关键字参数，并把他们都作为属性赋值给实例。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,gender,birth,**kw)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.gender = gender</div><div class="line">        self.birth = birth </div><div class="line">        self.__dict__.update(kw)</div><div class="line"></div><div class="line">xiaoming = Person(<span class="string">'Xiao Ming'</span>, <span class="string">'Male'</span>, <span class="string">'1990-1-1'</span>, job=<span class="string">'Student'</span>,fav =<span class="string">'Football'</span>)</div><div class="line"></div><div class="line"><span class="keyword">print</span> xiaoming.name</div><div class="line"><span class="keyword">print</span> xiaoming.job</div><div class="line"><span class="keyword">print</span> xiaoming.fav</div></pre></td></tr></table></figure></p><a id="more"></a><h4 id="python中访问限制"><a href="#python中访问限制" class="headerlink" title="python中访问限制"></a>python中访问限制</h4><p>我们可以给一个实例绑定很多属性，如果有些属性不希望被外部访问到怎么办？<br>Python对属性权限的控制是通过属性名来实现的，如果一个属性由双下划线开头<font color="#ff0000">(<strong>)</strong></font>，该属性就无法被外部访问。<br>但是，如果一个属性以”<font color="#ff0000">xxx<strong></strong></font>“的形式定义，那它又可以被外部访问了，以”xxx<strong>“定义的属性在Python的类中被称为特殊属性，有很多预定义的特殊属性可以使用，通常我们不要把普通属性用”</strong>xxx__”定义。<br>以单下划线开头的属性”_xxx”虽然也可以被外部访问，但是，按照习惯，他们不应该被外部访问。</p><p>访问限制举例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.__score = score</div><div class="line"></div><div class="line">p = Person(<span class="string">'Bob'</span>, <span class="number">59</span>)</div><div class="line"></div><div class="line"><span class="keyword">print</span> p.name</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">print</span> p.__score</div><div class="line"><span class="keyword">except</span> AttributeError:</div><div class="line">    <span class="keyword">print</span> <span class="string">'AttributeError'</span></div></pre></td></tr></table></figure></p><h4 id="python中创建类属性"><a href="#python中创建类属性" class="headerlink" title="python中创建类属性"></a>python中创建类属性</h4><p><b>类是模板，而实例则是根据类创建的对象。</b><br>绑定在一个实例上的属性不会影响其他实例，但是，类本身也是一个对象，如果在类上绑定一个属性，则所有实例都可以访问类的属性，并且，所有实例访问的类属性都是同一个！也就是说：</p><p><font color="#ff0000">实例属性每个实例各自拥有，互相独立，而类属性有且只有一份。</font><br>因为类属性是直接绑定在类上的，所以，访问类属性不需要创建实例，就可以直接访问</p><p>给 Person 类添加一个类属性 count，每创建一个实例，count 属性就加 1，这样就可以统计出一共创建了多少个 Person 的实例。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    count = <span class="number">0</span> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></div><div class="line">        Person.count = Person.count+<span class="number">1</span></div><div class="line">        self.name =name</div><div class="line"></div><div class="line">p1 = Person(<span class="string">'Bob'</span>)</div><div class="line"><span class="keyword">print</span> Person.count</div><div class="line"></div><div class="line">p2 = Person(<span class="string">'Alice'</span>)</div><div class="line"><span class="keyword">print</span> Person.count</div><div class="line"></div><div class="line">p3 = Person(<span class="string">'Tim'</span>)</div><div class="line"><span class="keyword">print</span> Person.count</div></pre></td></tr></table></figure></p><h4 id="python中类属性和实例属性名字冲突怎么办"><a href="#python中类属性和实例属性名字冲突怎么办" class="headerlink" title="python中类属性和实例属性名字冲突怎么办"></a>python中类属性和实例属性名字冲突怎么办</h4><p><font color="#ff0000">当实例属性和类属性重名时，实例属性优先级高</font>，它将屏蔽掉对类属性的访问。<br>可见，千万不要在实例上修改类属性，它实际上并没有修改类属性，而是给实例绑定了一个实例属性。</p><h4 id="python中定义实例方法"><a href="#python中定义实例方法" class="headerlink" title="python中定义实例方法"></a>python中定义实例方法</h4><p>一个实例的私有属性就是以<font color="#ff0000">__</font>开头的属性，无法被外部访问，那这些属性定义有什么用？</p><p><b>实例的方法</b>就是在类中定义的函数，它的第一个参数永远是 <font color="#ff0000">self</font>，指向调用该方法的实例本身，其他参数和一个普通函数是完全一样的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></div><div class="line">        self.__name = name</div><div class="line">        self.__score = score</div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_grade</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span>(self.__score &gt;= <span class="number">80</span>):</div><div class="line">            <span class="keyword">return</span> <span class="string">'A-优秀'</span></div><div class="line">        <span class="keyword">elif</span>(self.__score &gt;=<span class="number">60</span>):</div><div class="line">            <span class="keyword">return</span> <span class="string">'B-及格'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">'C-不及格'</span></div><div class="line"></div><div class="line">p1 = Person(<span class="string">'Bob'</span>, <span class="number">90</span>)</div><div class="line">p2 = Person(<span class="string">'Alice'</span>, <span class="number">65</span>)</div><div class="line">p3 = Person(<span class="string">'Tim'</span>, <span class="number">48</span>)</div><div class="line"></div><div class="line"><span class="keyword">print</span> p1.get_grade()</div><div class="line"><span class="keyword">print</span> p2.get_grade()</div><div class="line"><span class="keyword">print</span> p3.get_grade()</div></pre></td></tr></table></figure></p><h4 id="python中定义类方法"><a href="#python中定义类方法" class="headerlink" title="python中定义类方法"></a>python中定义类方法</h4><p>和属性类似，方法也分<font color="#ff0000">实例方法</font>和<font color="#ff0000">类方法</font>。<br>在<b>class</b>中定义的全部是实例方法，实例方法第一个参数 <b>self</b> 是实例本身。</p><p>要在class中定义类方法，需要通过标记一个<font color="#ff0000"> @classmethod</font>，该方法将绑定到 类上，而非类的实例。类方法的第一个参数将传入类本身，通常将参数名命名为 <b>cls</b>。</p><p>编写类方法获得__count值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    __count = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">how_many</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="keyword">return</span> cls.__count</div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setCount</span><span class="params">(cls,count)</span>:</span></div><div class="line">        cls.__count = count</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        count = Person.how_many()</div><div class="line">        count += <span class="number">1</span></div><div class="line">        Person.setCount(count)</div><div class="line">        </div><div class="line"><span class="keyword">print</span> Person.how_many()</div><div class="line"></div><div class="line">p1 = Person(<span class="string">'Bob'</span>)</div><div class="line"><span class="keyword">print</span> Person.how_many()</div><div class="line"></div><div class="line">p2 = Person(<span class="string">'Cat'</span>)</div><div class="line"><span class="keyword">print</span> Person.how_many()</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;python中初始化实例属性&quot;&gt;&lt;a href=&quot;#python中初始化实例属性&quot; class=&quot;headerlink&quot; title=&quot;python中初始化实例属性&quot;&gt;&lt;/a&gt;python中初始化实例属性&lt;/h4&gt;&lt;p&gt;虽然我们可以自由地给一个实例绑定各种属性，但是，现实世界中，一种类型的实例应该拥有相同名字的属性。&lt;br&gt;特殊的&lt;font color=&quot;#ff0000&quot;&gt;&lt;strong&gt;init&lt;/strong&gt;()&lt;/font&gt; 方法：&lt;br&gt;当创建实例时，&lt;strong&gt;init&lt;/strong&gt;()方法被自动调用，我们就能在此为每个实例都统一加上属性。&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;#ff0000&quot;&gt;&lt;strong&gt;init&lt;/strong&gt;()&lt;/font&gt;  方法的第一个参数必须是self（也可以用别的名字，但建议使用习惯用法），后续参数则可以自由指定，和定义函数没有任何区别。&lt;br&gt;相应地，创建实例时，就必须要提供除 self 以外的参数。&lt;br&gt;要特别注意的是，初学者定义&lt;strong&gt;init&lt;/strong&gt;()方法常常忘记了 self 参数，这会导致创建失败或运行不正常，因为第一个参数被Python解释器传入了实例的引用，从而导致整个方法的调用参数位置全部没有对上。&lt;/p&gt;
&lt;p&gt;定义Person类的&lt;strong&gt;init&lt;/strong&gt;方法，除了接受 name、gender 和 birth 外，还可接受任意关键字参数，并把他们都作为属性赋值给实例。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self,name,gender,birth,**kw)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.name = name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.gender = gender&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.birth = birth &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.__dict__.update(kw)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xiaoming = Person(&lt;span class=&quot;string&quot;&gt;&#39;Xiao Ming&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Male&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1990-1-1&#39;&lt;/span&gt;, job=&lt;span class=&quot;string&quot;&gt;&#39;Student&#39;&lt;/span&gt;,fav =&lt;span class=&quot;string&quot;&gt;&#39;Football&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; xiaoming.name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; xiaoming.job&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; xiaoming.fav&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="https://peihaibin.github.io/categories/Study/"/>
    
    
      <category term="python" scheme="https://peihaibin.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记 3</title>
    <link href="https://peihaibin.github.io/2017/09/25/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3/"/>
    <id>https://peihaibin.github.io/2017/09/25/Python-学习笔记-3/</id>
    <published>2017-09-25T08:57:03.000Z</published>
    <updated>2017-09-25T09:50:58.587Z</updated>
    
    <content type="html"><![CDATA[<!-- MarkdownTOC --><ul><li>python之导入模块</li><li>python中动态导入模块</li><li>python之使用<strong>future</strong></li></ul><!-- /MarkdownTOC --><h4 id="python之导入模块"><a href="#python之导入模块" class="headerlink" title="python之导入模块"></a>python之导入模块</h4><p>Python中的文件既是模块名，而目录就是包名，区分目录和包的方式就是看目录下是否有<font color="#ff0000"><strong>init</strong>.py</font><br>要使用一个模块，我们必须首先导入该模块。Python使用import语句导入一个模块<br>如果我们只希望导入用到的math模块的某几个函数，而不是所有函数，可以用下面的语句：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pow, sin, log</div></pre></td></tr></table></figure><br>如果使用 <font color="#ff0000">from…import</font> 导入 log 函数，势必引起冲突。这时，可以给函数起个<font color="#ff0000">“别名”</font>来避免冲突：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log</div><div class="line"><span class="keyword">from</span> logging <span class="keyword">import</span> log <span class="keyword">as</span> logger   <span class="comment"># logging的log现在变成了logger</span></div></pre></td></tr></table></figure></p><a id="more"></a><h4 id="python中动态导入模块"><a href="#python中动态导入模块" class="headerlink" title="python中动态导入模块"></a>python中动态导入模块</h4><p>如果导入的模块不存在，Python解释器会报 ImportError 错误。<br>利用ImportError错误，我们经常在Python中动态导入模块：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    ???</div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    ???</div><div class="line"></div></pre></td></tr></table></figure></p><p><font color="#ff0000">try</font> 的作用是捕获错误，并在捕获到指定错误时执行 <font color="#ff0000">except</font> 语句。</p><h4 id="python之使用future"><a href="#python之使用future" class="headerlink" title="python之使用future"></a>python之使用<strong>future</strong></h4><p>Python的新版本会引入新的功能，但是，实际上这些功能在上一个老版本中就已经存在了。要“试用”某一新的特性，就可以通过导入<strong>future</strong>模块的某些功能来实现。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> packagename</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- MarkdownTOC --&gt;
&lt;ul&gt;
&lt;li&gt;python之导入模块&lt;/li&gt;
&lt;li&gt;python中动态导入模块&lt;/li&gt;
&lt;li&gt;python之使用&lt;strong&gt;future&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;
&lt;h4 id=&quot;python之导入模块&quot;&gt;&lt;a href=&quot;#python之导入模块&quot; class=&quot;headerlink&quot; title=&quot;python之导入模块&quot;&gt;&lt;/a&gt;python之导入模块&lt;/h4&gt;&lt;p&gt;Python中的文件既是模块名，而目录就是包名，区分目录和包的方式就是看目录下是否有&lt;font color=&quot;#ff0000&quot;&gt;&lt;strong&gt;init&lt;/strong&gt;.py&lt;/font&gt;&lt;br&gt;要使用一个模块，我们必须首先导入该模块。Python使用import语句导入一个模块&lt;br&gt;如果我们只希望导入用到的math模块的某几个函数，而不是所有函数，可以用下面的语句：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; math &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pow, sin, log&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;如果使用 &lt;font color=&quot;#ff0000&quot;&gt;from…import&lt;/font&gt; 导入 log 函数，势必引起冲突。这时，可以给函数起个&lt;font color=&quot;#ff0000&quot;&gt;“别名”&lt;/font&gt;来避免冲突：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; math &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; log&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; logging &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; log &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; logger   &lt;span class=&quot;comment&quot;&gt;# logging的log现在变成了logger&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="https://peihaibin.github.io/categories/Study/"/>
    
    
      <category term="python" scheme="https://peihaibin.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记 2</title>
    <link href="https://peihaibin.github.io/2017/09/25/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/"/>
    <id>https://peihaibin.github.io/2017/09/25/Python-学习笔记-2/</id>
    <published>2017-09-25T05:21:00.000Z</published>
    <updated>2017-09-25T09:13:41.455Z</updated>
    
    <content type="html"><![CDATA[<h4 id="python中编写无参数decorator-装饰器"><a href="#python中编写无参数decorator-装饰器" class="headerlink" title="python中编写无参数decorator(装饰器)"></a>python中编写无参数decorator(装饰器)</h4><p>Python的 decorator 本质上就是一个高阶函数，它接收一个函数作为参数，然后，返回一个新函数。<br>使用 decorator 用Python提供的 <font color="#ff0000">@</font> 语法，这样可以避免手动编写<font color="#ff0000"> f = decorate(f) </font>这样的代码。</p><h5 id="编写一个-performance，它可以打印出函数调用的时间。"><a href="#编写一个-performance，它可以打印出函数调用的时间。" class="headerlink" title="编写一个@performance，它可以打印出函数调用的时间。"></a>编写一个@performance，它可以打印出函数调用的时间。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import time</div><div class="line"></div><div class="line">def performance(f):</div><div class="line">    def fn(*args,**kw):</div><div class="line">        ts = time.time()</div><div class="line">        print &apos;call &apos; + f.__name__ +&apos;() in &apos; + str(ts) #time.strftime(&apos;%Y-%m-%d %H-%M-%S&apos;,time.localtime(ts))    </div><div class="line">        f(*args,**kw)</div><div class="line">        te = time.time()</div><div class="line">        print &apos;end &apos; + f.__name__ +&apos;() in &apos; + str(te) #time.strftime(&apos;%Y-%m-%d %H-%M-%S&apos;,time.localtime(ts))    </div><div class="line">        t = te - ts</div><div class="line">        print &apos;run time is &apos; + str(t*1000)[:4] +&apos;ms&apos;</div><div class="line">        return f(*args,**kw)</div><div class="line">    return fn</div><div class="line"></div><div class="line">@performance</div><div class="line">def factorial(n):</div><div class="line">    return reduce(lambda x,y: x*y, range(1, n+1))</div><div class="line"></div><div class="line">print factorial(10)</div></pre></td></tr></table></figure><a id="more"></a><h4 id="python中完善decorator"><a href="#python中完善decorator" class="headerlink" title="python中完善decorator"></a>python中完善decorator</h4><p>由于<font color="#ff0000">decorator</font>返回的新函数函数名，这对于那些依赖函数名的代码就会失效。<font color="#ff0000">decorator</font>还改变了函数的<font color="#ff0000"><strong>doc</strong></font>等其它属性。如果要让调用者看不出一个函数经过了<font color="#ff0000">@decorator</font>的“改造”，就需要把原函数的一些属性复制到新函数中；这样写<font color="#ff0000">decorator</font>很不方便，因为我们也很难把原函数的所有必要属性都一个一个复制到新函数上，所以Python内置的<font color="#ff0000">functools</font>可以用来自动化完成这个“复制”的任务；最后需要指出，由于我们把原函数签名改成了<font color="#ff0000">(*args, **kw)</font>，因此，无法获得原函数的原始参数信息。即便我们采用固定参数来装饰只有一个参数的函数。  </p><h4 id="python中偏函数"><a href="#python中偏函数" class="headerlink" title="python中偏函数"></a>python中偏函数</h4><p><font color="#ff0000">functools.partial</font>可以把一个参数多的函数变成一个参数少的新函数，少的参数需要在创建时指定默认值，这样，新函数调用的难度就降低了。  </p><pre><code>import functoolssorted_ignore_case = functools.partial(sorted,key=str.lower)print sorted_ignore_case([&apos;bob&apos;, &apos;about&apos;, &apos;Zoo&apos;, &apos;Credit&apos;])</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;python中编写无参数decorator-装饰器&quot;&gt;&lt;a href=&quot;#python中编写无参数decorator-装饰器&quot; class=&quot;headerlink&quot; title=&quot;python中编写无参数decorator(装饰器)&quot;&gt;&lt;/a&gt;python中编写无参数decorator(装饰器)&lt;/h4&gt;&lt;p&gt;Python的 decorator 本质上就是一个高阶函数，它接收一个函数作为参数，然后，返回一个新函数。&lt;br&gt;使用 decorator 用Python提供的 &lt;font color=&quot;#ff0000&quot;&gt;@&lt;/font&gt; 语法，这样可以避免手动编写&lt;font color=&quot;#ff0000&quot;&gt; f = decorate(f) &lt;/font&gt;这样的代码。&lt;/p&gt;
&lt;h5 id=&quot;编写一个-performance，它可以打印出函数调用的时间。&quot;&gt;&lt;a href=&quot;#编写一个-performance，它可以打印出函数调用的时间。&quot; class=&quot;headerlink&quot; title=&quot;编写一个@performance，它可以打印出函数调用的时间。&quot;&gt;&lt;/a&gt;编写一个@performance，它可以打印出函数调用的时间。&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import time&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;def performance(f):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    def fn(*args,**kw):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ts = time.time()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print &amp;apos;call &amp;apos; + f.__name__ +&amp;apos;() in &amp;apos; + str(ts) #time.strftime(&amp;apos;%Y-%m-%d %H-%M-%S&amp;apos;,time.localtime(ts))    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        f(*args,**kw)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        te = time.time()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print &amp;apos;end &amp;apos; + f.__name__ +&amp;apos;() in &amp;apos; + str(te) #time.strftime(&amp;apos;%Y-%m-%d %H-%M-%S&amp;apos;,time.localtime(ts))    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t = te - ts&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print &amp;apos;run time is &amp;apos; + str(t*1000)[:4] +&amp;apos;ms&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return f(*args,**kw)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return fn&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@performance&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;def factorial(n):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return reduce(lambda x,y: x*y, range(1, n+1))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print factorial(10)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Study" scheme="https://peihaibin.github.io/categories/Study/"/>
    
    
      <category term="python" scheme="https://peihaibin.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记 1</title>
    <link href="https://peihaibin.github.io/2017/09/25/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/"/>
    <id>https://peihaibin.github.io/2017/09/25/Python-学习笔记-1/</id>
    <published>2017-09-25T02:16:00.000Z</published>
    <updated>2017-09-25T09:13:40.433Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Python中可以把函数作为参数，则该函数被成为高阶函数。"><a href="#Python中可以把函数作为参数，则该函数被成为高阶函数。" class="headerlink" title="Python中可以把函数作为参数，则该函数被成为高阶函数。"></a>Python中可以把函数作为参数，则该函数被成为高阶函数。</h4><p>高阶函数中引入平方根函数的办法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import math</div><div class="line">from math import sqrt</div><div class="line"></div><div class="line">def add(x, y, f):</div><div class="line">    <span class="built_in">return</span> f(x) + f(y)</div><div class="line"></div><div class="line"><span class="built_in">print</span> add(25, 9, sqrt)</div></pre></td></tr></table></figure><h4 id="python中map-函数"><a href="#python中map-函数" class="headerlink" title="python中map()函数"></a>python中map()函数</h4><p>map()是 Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。</p><h5 id="利用map-函数，把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list："><a href="#利用map-函数，把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list：" class="headerlink" title="利用map()函数，把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list："></a>利用map()函数，把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def format_name(s):</div><div class="line">    //<span class="built_in">return</span> s.capitalize()</div><div class="line"> <span class="built_in">return</span> s[:1].uppper()+s[1:].lower()</div><div class="line">     </div><div class="line"><span class="built_in">print</span> map(format_name, [<span class="string">'adam'</span>, <span class="string">'LISA'</span>, <span class="string">'barT'</span>])</div></pre></td></tr></table></figure><a id="more"></a><h4 id="python中reduce-函数"><a href="#python中reduce-函数" class="headerlink" title="python中reduce()函数"></a>python中reduce()函数</h4><p>reduce()函数也是Python内置的一个高阶函数。reduce()函数接收的参数和 map()类似，一个函数 f，一个list，但行为和 map()不同，reduce()传入的函数 f 必须接收两个参数，reduce()对list的每个元素反复调用函数f，并返回最终结果值。reduce()还可以接收第3个可选参数，作为计算的初始值</p><h5 id="利用reduce-函数来求积"><a href="#利用reduce-函数来求积" class="headerlink" title="利用reduce()函数来求积"></a>利用reduce()函数来求积</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">def prod(x, y):</div><div class="line">    <span class="built_in">return</span> x*y</div><div class="line"></div><div class="line"><span class="built_in">print</span> reduce(prod, [2, 4, 5, 7, 12])</div></pre></td></tr></table></figure><h4 id="python中filter-函数"><a href="#python中filter-函数" class="headerlink" title="python中filter()函数"></a>python中filter()函数</h4><p>filter()函数是 Python 内置的另一个有用的高阶函数，filter()函数接收一个函数 f 和一个list，这个函数 f 的作用是对每个元素进行判断，返回 True或 False，filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。</p><h5 id="利用filter-过滤出1-100中平方根是整数的数"><a href="#利用filter-过滤出1-100中平方根是整数的数" class="headerlink" title="利用filter()过滤出1~100中平方根是整数的数"></a>利用filter()过滤出1~100中平方根是整数的数</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import math</div><div class="line">from math import sqrt</div><div class="line"></div><div class="line">def is_sqr(x):</div><div class="line">    <span class="built_in">return</span> sqrt(x)%1 == 0 </div><div class="line"></div><div class="line"><span class="built_in">print</span> filter(is_sqr, range(1, 101))</div></pre></td></tr></table></figure><h4 id="python中自定义排序函数"><a href="#python中自定义排序函数" class="headerlink" title="python中自定义排序函数"></a>python中自定义排序函数</h4><p>Python内置的 sorted()函数可对list进行排序,sorted()也是一个高阶函数，它可以接收一个比较函数来实现自定义排序，比较函数的定义是，传入两个待比较的元素 x, y，如果 x 应该排在 y 的前面，返回 -1，如果 x 应该排在 y 的后面，返回 1。如果 x 和 y 相等，返回 0。</p><h5 id="利用sorted-高阶函数，实现忽略大小写排序的算法"><a href="#利用sorted-高阶函数，实现忽略大小写排序的算法" class="headerlink" title="利用sorted()高阶函数，实现忽略大小写排序的算法"></a>利用sorted()高阶函数，实现忽略大小写排序的算法</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">def cmp_ignore_case(s1, s2):</div><div class="line">    <span class="keyword">if</span> s1.lower() &gt; s2.lower():</div><div class="line">        <span class="built_in">return</span> 1</div><div class="line">    <span class="keyword">if</span> s1.lower() &lt; s2.lower():</div><div class="line">        <span class="built_in">return</span> -1 </div><div class="line">    <span class="built_in">return</span> 0</div><div class="line"></div><div class="line"><span class="built_in">print</span> sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], cmp_ignore_case)</div></pre></td></tr></table></figure><h4 id="python中返回函数"><a href="#python中返回函数" class="headerlink" title="python中返回函数"></a>python中返回函数</h4><p>Python的函数不但可以返回int、str、list、dict等数据类型，还可以返回函数！</p><h5 id="编写一个函数calc-prod-lst-，它接收一个list，返回一个函数，返回函数可以计算参数的乘积"><a href="#编写一个函数calc-prod-lst-，它接收一个list，返回一个函数，返回函数可以计算参数的乘积" class="headerlink" title="编写一个函数calc_prod(lst)，它接收一个list，返回一个函数，返回函数可以计算参数的乘积"></a>编写一个函数calc_prod(lst)，它接收一个list，返回一个函数，返回函数可以计算参数的乘积</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">def calc_prod(lst):</div><div class="line">    def prod(x,y):</div><div class="line">        <span class="built_in">return</span> x*y</div><div class="line">    def lazy_calc_prod():</div><div class="line">        <span class="built_in">return</span> reduce(g,lst)</div><div class="line">    <span class="built_in">return</span> lazy_calc_prod</div><div class="line"></div><div class="line">f = calc_prod([1, 2, 3, 4])</div><div class="line"><span class="built_in">print</span> f()</div></pre></td></tr></table></figure><h4 id="python中闭包"><a href="#python中闭包" class="headerlink" title="python中闭包"></a>python中闭包</h4><p>闭包的特点是返回的函数还引用了外层函数的局部变量，所以，要正确使用闭包，<strong>就要确保引用的局部变量在函数返回后不能变。返回函数不要引用任何循环变量，或者后续会发生变化的变量。</strong></p><p>#####希望一次返回3个函数，分别计算1x1,2x2,3x3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">def count():</div><div class="line">    fs = []</div><div class="line">    for i in range(1, 4):</div><div class="line">        def f(j=i):</div><div class="line">            return j*j</div><div class="line">        fs.append(f)</div><div class="line">    return fs</div><div class="line"></div><div class="line">f1, f2, f3 = count()</div><div class="line">print f1(), f2(), f3()</div></pre></td></tr></table></figure></p><h4 id="python中匿名函数"><a href="#python中匿名函数" class="headerlink" title="python中匿名函数"></a>python中匿名函数</h4><p>高阶函数可以接收函数做参数，有些时候，我们不需要显式地定义函数，直接传入匿名函数更方便。<br>在Python中，对匿名函数提供了有限支持。<br>关键字<font color="#ff0000">lambda</font> 表示匿名函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9])</div><div class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81]</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Python中可以把函数作为参数，则该函数被成为高阶函数。&quot;&gt;&lt;a href=&quot;#Python中可以把函数作为参数，则该函数被成为高阶函数。&quot; class=&quot;headerlink&quot; title=&quot;Python中可以把函数作为参数，则该函数被成为高阶函数。&quot;&gt;&lt;/a&gt;Python中可以把函数作为参数，则该函数被成为高阶函数。&lt;/h4&gt;&lt;p&gt;高阶函数中引入平方根函数的办法&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import math&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;from math import sqrt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;def add(x, y, f):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; f(x) + f(y)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; add(25, 9, sqrt)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;python中map-函数&quot;&gt;&lt;a href=&quot;#python中map-函数&quot; class=&quot;headerlink&quot; title=&quot;python中map()函数&quot;&gt;&lt;/a&gt;python中map()函数&lt;/h4&gt;&lt;p&gt;map()是 Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。&lt;/p&gt;
&lt;h5 id=&quot;利用map-函数，把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list：&quot;&gt;&lt;a href=&quot;#利用map-函数，把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list：&quot; class=&quot;headerlink&quot; title=&quot;利用map()函数，把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list：&quot;&gt;&lt;/a&gt;利用map()函数，把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list：&lt;/h5&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;def format_name(s):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; s.capitalize()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; s[:1].uppper()+s[1:].lower()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; map(format_name, [&lt;span class=&quot;string&quot;&gt;&#39;adam&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;LISA&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;barT&#39;&lt;/span&gt;])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Study" scheme="https://peihaibin.github.io/categories/Study/"/>
    
    
      <category term="python" scheme="https://peihaibin.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Setting up SSH for Git on Windows</title>
    <link href="https://peihaibin.github.io/2017/09/22/Setting-up-SSH-for-Git-on-Windows/"/>
    <id>https://peihaibin.github.io/2017/09/22/Setting-up-SSH-for-Git-on-Windows/</id>
    <published>2017-09-22T09:27:00.000Z</published>
    <updated>2017-09-25T04:46:25.790Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1:安装Hexo"></a>1:安装Hexo</h4><p>当安装完成Hexo时，准备通过hexo d 上传个人博客到github。</p><h4 id="2-发现问题"><a href="#2-发现问题" class="headerlink" title="2:发现问题"></a>2:发现问题</h4><p>当上传时，发现报错：“Permission denied (publickey)”<br><a id="more"></a></p><h4 id="3-解决办法"><a href="#3-解决办法" class="headerlink" title="3:解决办法"></a>3:解决办法</h4><p>应该是生成的sshkey没有引入到MinTTY，需要重新设置一下。</p><h4 id="4-开启ssh-agent服务"><a href="#4-开启ssh-agent服务" class="headerlink" title="4:开启ssh-agent服务"></a>4:开启ssh-agent服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">eval</span> `ssh-agent -s`</div></pre></td></tr></table></figure><h4 id="5-添加key到ssh-agent："><a href="#5-添加key到ssh-agent：" class="headerlink" title="5:添加key到ssh-agent："></a>5:添加key到ssh-agent：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-add ~/.ssh/keyfilename</div></pre></td></tr></table></figure><h4 id="6-验证是否正常"><a href="#6-验证是否正常" class="headerlink" title="6:验证是否正常"></a>6:验证是否正常</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-安装Hexo&quot;&gt;&lt;a href=&quot;#1-安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;1:安装Hexo&quot;&gt;&lt;/a&gt;1:安装Hexo&lt;/h4&gt;&lt;p&gt;当安装完成Hexo时，准备通过hexo d 上传个人博客到github。&lt;/p&gt;
&lt;h4 id=&quot;2-发现问题&quot;&gt;&lt;a href=&quot;#2-发现问题&quot; class=&quot;headerlink&quot; title=&quot;2:发现问题&quot;&gt;&lt;/a&gt;2:发现问题&lt;/h4&gt;&lt;p&gt;当上传时，发现报错：“Permission denied (publickey)”&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://peihaibin.github.io/tags/git/"/>
    
      <category term="publickey" scheme="https://peihaibin.github.io/tags/publickey/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://peihaibin.github.io/2017/09/21/hello-world/"/>
    <id>https://peihaibin.github.io/2017/09/21/hello-world/</id>
    <published>2017-09-21T04:46:46.000Z</published>
    <updated>2017-09-25T09:42:47.677Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>   <a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
