<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  <subtitle>工作日志，自我管理，知识管理，时间管理，阅读写作，思维导图</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://peihaibin.github.io/"/>
  <updated>2017-09-25T09:50:58.587Z</updated>
  <id>https://peihaibin.github.io/</id>
  
  <author>
    <name>peihaibin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python 学习笔记 3</title>
    <link href="https://peihaibin.github.io/2017/09/25/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3/"/>
    <id>https://peihaibin.github.io/2017/09/25/Python-学习笔记-3/</id>
    <published>2017-09-25T08:57:03.000Z</published>
    <updated>2017-09-25T09:50:58.587Z</updated>
    
    <content type="html"><![CDATA[<!-- MarkdownTOC --><ul><li>python之导入模块</li><li>python中动态导入模块</li><li>python之使用<strong>future</strong></li></ul><!-- /MarkdownTOC --><h4 id="python之导入模块"><a href="#python之导入模块" class="headerlink" title="python之导入模块"></a>python之导入模块</h4><p>Python中的文件既是模块名，而目录就是包名，区分目录和包的方式就是看目录下是否有<font color="#ff0000"><strong>init</strong>.py</font><br>要使用一个模块，我们必须首先导入该模块。Python使用import语句导入一个模块<br>如果我们只希望导入用到的math模块的某几个函数，而不是所有函数，可以用下面的语句：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pow, sin, log</div></pre></td></tr></table></figure><br>如果使用 <font color="#ff0000">from…import</font> 导入 log 函数，势必引起冲突。这时，可以给函数起个<font color="#ff0000">“别名”</font>来避免冲突：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log</div><div class="line"><span class="keyword">from</span> logging <span class="keyword">import</span> log <span class="keyword">as</span> logger   <span class="comment"># logging的log现在变成了logger</span></div></pre></td></tr></table></figure></p><a id="more"></a><h4 id="python中动态导入模块"><a href="#python中动态导入模块" class="headerlink" title="python中动态导入模块"></a>python中动态导入模块</h4><p>如果导入的模块不存在，Python解释器会报 ImportError 错误。<br>利用ImportError错误，我们经常在Python中动态导入模块：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    ???</div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    ???</div><div class="line"></div></pre></td></tr></table></figure></p><p><font color="#ff0000">try</font> 的作用是捕获错误，并在捕获到指定错误时执行 <font color="#ff0000">except</font> 语句。</p><h4 id="python之使用future"><a href="#python之使用future" class="headerlink" title="python之使用future"></a>python之使用<strong>future</strong></h4><p>Python的新版本会引入新的功能，但是，实际上这些功能在上一个老版本中就已经存在了。要“试用”某一新的特性，就可以通过导入<strong>future</strong>模块的某些功能来实现。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> packagename</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- MarkdownTOC --&gt;
&lt;ul&gt;
&lt;li&gt;python之导入模块&lt;/li&gt;
&lt;li&gt;python中动态导入模块&lt;/li&gt;
&lt;li&gt;python之使用&lt;strong&gt;future&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;
&lt;h4 id=&quot;python之导入模块&quot;&gt;&lt;a href=&quot;#python之导入模块&quot; class=&quot;headerlink&quot; title=&quot;python之导入模块&quot;&gt;&lt;/a&gt;python之导入模块&lt;/h4&gt;&lt;p&gt;Python中的文件既是模块名，而目录就是包名，区分目录和包的方式就是看目录下是否有&lt;font color=&quot;#ff0000&quot;&gt;&lt;strong&gt;init&lt;/strong&gt;.py&lt;/font&gt;&lt;br&gt;要使用一个模块，我们必须首先导入该模块。Python使用import语句导入一个模块&lt;br&gt;如果我们只希望导入用到的math模块的某几个函数，而不是所有函数，可以用下面的语句：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; math &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pow, sin, log&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;如果使用 &lt;font color=&quot;#ff0000&quot;&gt;from…import&lt;/font&gt; 导入 log 函数，势必引起冲突。这时，可以给函数起个&lt;font color=&quot;#ff0000&quot;&gt;“别名”&lt;/font&gt;来避免冲突：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; math &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; log&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; logging &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; log &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; logger   &lt;span class=&quot;comment&quot;&gt;# logging的log现在变成了logger&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="https://peihaibin.github.io/categories/Study/"/>
    
    
      <category term="python" scheme="https://peihaibin.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记 2</title>
    <link href="https://peihaibin.github.io/2017/09/25/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/"/>
    <id>https://peihaibin.github.io/2017/09/25/Python-学习笔记-2/</id>
    <published>2017-09-25T05:21:00.000Z</published>
    <updated>2017-09-25T09:13:41.455Z</updated>
    
    <content type="html"><![CDATA[<h4 id="python中编写无参数decorator-装饰器"><a href="#python中编写无参数decorator-装饰器" class="headerlink" title="python中编写无参数decorator(装饰器)"></a>python中编写无参数decorator(装饰器)</h4><p>Python的 decorator 本质上就是一个高阶函数，它接收一个函数作为参数，然后，返回一个新函数。<br>使用 decorator 用Python提供的 <font color="#ff0000">@</font> 语法，这样可以避免手动编写<font color="#ff0000"> f = decorate(f) </font>这样的代码。</p><h5 id="编写一个-performance，它可以打印出函数调用的时间。"><a href="#编写一个-performance，它可以打印出函数调用的时间。" class="headerlink" title="编写一个@performance，它可以打印出函数调用的时间。"></a>编写一个@performance，它可以打印出函数调用的时间。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import time</div><div class="line"></div><div class="line">def performance(f):</div><div class="line">    def fn(*args,**kw):</div><div class="line">        ts = time.time()</div><div class="line">        print &apos;call &apos; + f.__name__ +&apos;() in &apos; + str(ts) #time.strftime(&apos;%Y-%m-%d %H-%M-%S&apos;,time.localtime(ts))    </div><div class="line">        f(*args,**kw)</div><div class="line">        te = time.time()</div><div class="line">        print &apos;end &apos; + f.__name__ +&apos;() in &apos; + str(te) #time.strftime(&apos;%Y-%m-%d %H-%M-%S&apos;,time.localtime(ts))    </div><div class="line">        t = te - ts</div><div class="line">        print &apos;run time is &apos; + str(t*1000)[:4] +&apos;ms&apos;</div><div class="line">        return f(*args,**kw)</div><div class="line">    return fn</div><div class="line"></div><div class="line">@performance</div><div class="line">def factorial(n):</div><div class="line">    return reduce(lambda x,y: x*y, range(1, n+1))</div><div class="line"></div><div class="line">print factorial(10)</div></pre></td></tr></table></figure><a id="more"></a><h4 id="python中完善decorator"><a href="#python中完善decorator" class="headerlink" title="python中完善decorator"></a>python中完善decorator</h4><p>由于<font color="#ff0000">decorator</font>返回的新函数函数名，这对于那些依赖函数名的代码就会失效。<font color="#ff0000">decorator</font>还改变了函数的<font color="#ff0000"><strong>doc</strong></font>等其它属性。如果要让调用者看不出一个函数经过了<font color="#ff0000">@decorator</font>的“改造”，就需要把原函数的一些属性复制到新函数中；这样写<font color="#ff0000">decorator</font>很不方便，因为我们也很难把原函数的所有必要属性都一个一个复制到新函数上，所以Python内置的<font color="#ff0000">functools</font>可以用来自动化完成这个“复制”的任务；最后需要指出，由于我们把原函数签名改成了<font color="#ff0000">(*args, **kw)</font>，因此，无法获得原函数的原始参数信息。即便我们采用固定参数来装饰只有一个参数的函数。  </p><h4 id="python中偏函数"><a href="#python中偏函数" class="headerlink" title="python中偏函数"></a>python中偏函数</h4><p><font color="#ff0000">functools.partial</font>可以把一个参数多的函数变成一个参数少的新函数，少的参数需要在创建时指定默认值，这样，新函数调用的难度就降低了。  </p><pre><code>import functoolssorted_ignore_case = functools.partial(sorted,key=str.lower)print sorted_ignore_case([&apos;bob&apos;, &apos;about&apos;, &apos;Zoo&apos;, &apos;Credit&apos;])</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;python中编写无参数decorator-装饰器&quot;&gt;&lt;a href=&quot;#python中编写无参数decorator-装饰器&quot; class=&quot;headerlink&quot; title=&quot;python中编写无参数decorator(装饰器)&quot;&gt;&lt;/a&gt;python中编写无参数decorator(装饰器)&lt;/h4&gt;&lt;p&gt;Python的 decorator 本质上就是一个高阶函数，它接收一个函数作为参数，然后，返回一个新函数。&lt;br&gt;使用 decorator 用Python提供的 &lt;font color=&quot;#ff0000&quot;&gt;@&lt;/font&gt; 语法，这样可以避免手动编写&lt;font color=&quot;#ff0000&quot;&gt; f = decorate(f) &lt;/font&gt;这样的代码。&lt;/p&gt;
&lt;h5 id=&quot;编写一个-performance，它可以打印出函数调用的时间。&quot;&gt;&lt;a href=&quot;#编写一个-performance，它可以打印出函数调用的时间。&quot; class=&quot;headerlink&quot; title=&quot;编写一个@performance，它可以打印出函数调用的时间。&quot;&gt;&lt;/a&gt;编写一个@performance，它可以打印出函数调用的时间。&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import time&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;def performance(f):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    def fn(*args,**kw):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ts = time.time()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print &amp;apos;call &amp;apos; + f.__name__ +&amp;apos;() in &amp;apos; + str(ts) #time.strftime(&amp;apos;%Y-%m-%d %H-%M-%S&amp;apos;,time.localtime(ts))    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        f(*args,**kw)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        te = time.time()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print &amp;apos;end &amp;apos; + f.__name__ +&amp;apos;() in &amp;apos; + str(te) #time.strftime(&amp;apos;%Y-%m-%d %H-%M-%S&amp;apos;,time.localtime(ts))    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t = te - ts&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print &amp;apos;run time is &amp;apos; + str(t*1000)[:4] +&amp;apos;ms&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return f(*args,**kw)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return fn&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@performance&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;def factorial(n):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return reduce(lambda x,y: x*y, range(1, n+1))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print factorial(10)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Study" scheme="https://peihaibin.github.io/categories/Study/"/>
    
    
      <category term="python" scheme="https://peihaibin.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记 1</title>
    <link href="https://peihaibin.github.io/2017/09/25/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/"/>
    <id>https://peihaibin.github.io/2017/09/25/Python-学习笔记-1/</id>
    <published>2017-09-25T02:16:00.000Z</published>
    <updated>2017-09-25T09:13:40.433Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Python中可以把函数作为参数，则该函数被成为高阶函数。"><a href="#Python中可以把函数作为参数，则该函数被成为高阶函数。" class="headerlink" title="Python中可以把函数作为参数，则该函数被成为高阶函数。"></a>Python中可以把函数作为参数，则该函数被成为高阶函数。</h4><p>高阶函数中引入平方根函数的办法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import math</div><div class="line">from math import sqrt</div><div class="line"></div><div class="line">def add(x, y, f):</div><div class="line">    <span class="built_in">return</span> f(x) + f(y)</div><div class="line"></div><div class="line"><span class="built_in">print</span> add(25, 9, sqrt)</div></pre></td></tr></table></figure><h4 id="python中map-函数"><a href="#python中map-函数" class="headerlink" title="python中map()函数"></a>python中map()函数</h4><p>map()是 Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。</p><h5 id="利用map-函数，把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list："><a href="#利用map-函数，把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list：" class="headerlink" title="利用map()函数，把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list："></a>利用map()函数，把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def format_name(s):</div><div class="line">    //<span class="built_in">return</span> s.capitalize()</div><div class="line"> <span class="built_in">return</span> s[:1].uppper()+s[1:].lower()</div><div class="line">     </div><div class="line"><span class="built_in">print</span> map(format_name, [<span class="string">'adam'</span>, <span class="string">'LISA'</span>, <span class="string">'barT'</span>])</div></pre></td></tr></table></figure><a id="more"></a><h4 id="python中reduce-函数"><a href="#python中reduce-函数" class="headerlink" title="python中reduce()函数"></a>python中reduce()函数</h4><p>reduce()函数也是Python内置的一个高阶函数。reduce()函数接收的参数和 map()类似，一个函数 f，一个list，但行为和 map()不同，reduce()传入的函数 f 必须接收两个参数，reduce()对list的每个元素反复调用函数f，并返回最终结果值。reduce()还可以接收第3个可选参数，作为计算的初始值</p><h5 id="利用reduce-函数来求积"><a href="#利用reduce-函数来求积" class="headerlink" title="利用reduce()函数来求积"></a>利用reduce()函数来求积</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">def prod(x, y):</div><div class="line">    <span class="built_in">return</span> x*y</div><div class="line"></div><div class="line"><span class="built_in">print</span> reduce(prod, [2, 4, 5, 7, 12])</div></pre></td></tr></table></figure><h4 id="python中filter-函数"><a href="#python中filter-函数" class="headerlink" title="python中filter()函数"></a>python中filter()函数</h4><p>filter()函数是 Python 内置的另一个有用的高阶函数，filter()函数接收一个函数 f 和一个list，这个函数 f 的作用是对每个元素进行判断，返回 True或 False，filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。</p><h5 id="利用filter-过滤出1-100中平方根是整数的数"><a href="#利用filter-过滤出1-100中平方根是整数的数" class="headerlink" title="利用filter()过滤出1~100中平方根是整数的数"></a>利用filter()过滤出1~100中平方根是整数的数</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import math</div><div class="line">from math import sqrt</div><div class="line"></div><div class="line">def is_sqr(x):</div><div class="line">    <span class="built_in">return</span> sqrt(x)%1 == 0 </div><div class="line"></div><div class="line"><span class="built_in">print</span> filter(is_sqr, range(1, 101))</div></pre></td></tr></table></figure><h4 id="python中自定义排序函数"><a href="#python中自定义排序函数" class="headerlink" title="python中自定义排序函数"></a>python中自定义排序函数</h4><p>Python内置的 sorted()函数可对list进行排序,sorted()也是一个高阶函数，它可以接收一个比较函数来实现自定义排序，比较函数的定义是，传入两个待比较的元素 x, y，如果 x 应该排在 y 的前面，返回 -1，如果 x 应该排在 y 的后面，返回 1。如果 x 和 y 相等，返回 0。</p><h5 id="利用sorted-高阶函数，实现忽略大小写排序的算法"><a href="#利用sorted-高阶函数，实现忽略大小写排序的算法" class="headerlink" title="利用sorted()高阶函数，实现忽略大小写排序的算法"></a>利用sorted()高阶函数，实现忽略大小写排序的算法</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">def cmp_ignore_case(s1, s2):</div><div class="line">    <span class="keyword">if</span> s1.lower() &gt; s2.lower():</div><div class="line">        <span class="built_in">return</span> 1</div><div class="line">    <span class="keyword">if</span> s1.lower() &lt; s2.lower():</div><div class="line">        <span class="built_in">return</span> -1 </div><div class="line">    <span class="built_in">return</span> 0</div><div class="line"></div><div class="line"><span class="built_in">print</span> sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], cmp_ignore_case)</div></pre></td></tr></table></figure><h4 id="python中返回函数"><a href="#python中返回函数" class="headerlink" title="python中返回函数"></a>python中返回函数</h4><p>Python的函数不但可以返回int、str、list、dict等数据类型，还可以返回函数！</p><h5 id="编写一个函数calc-prod-lst-，它接收一个list，返回一个函数，返回函数可以计算参数的乘积"><a href="#编写一个函数calc-prod-lst-，它接收一个list，返回一个函数，返回函数可以计算参数的乘积" class="headerlink" title="编写一个函数calc_prod(lst)，它接收一个list，返回一个函数，返回函数可以计算参数的乘积"></a>编写一个函数calc_prod(lst)，它接收一个list，返回一个函数，返回函数可以计算参数的乘积</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">def calc_prod(lst):</div><div class="line">    def prod(x,y):</div><div class="line">        <span class="built_in">return</span> x*y</div><div class="line">    def lazy_calc_prod():</div><div class="line">        <span class="built_in">return</span> reduce(g,lst)</div><div class="line">    <span class="built_in">return</span> lazy_calc_prod</div><div class="line"></div><div class="line">f = calc_prod([1, 2, 3, 4])</div><div class="line"><span class="built_in">print</span> f()</div></pre></td></tr></table></figure><h4 id="python中闭包"><a href="#python中闭包" class="headerlink" title="python中闭包"></a>python中闭包</h4><p>闭包的特点是返回的函数还引用了外层函数的局部变量，所以，要正确使用闭包，<strong>就要确保引用的局部变量在函数返回后不能变。返回函数不要引用任何循环变量，或者后续会发生变化的变量。</strong></p><p>#####希望一次返回3个函数，分别计算1x1,2x2,3x3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">def count():</div><div class="line">    fs = []</div><div class="line">    for i in range(1, 4):</div><div class="line">        def f(j=i):</div><div class="line">            return j*j</div><div class="line">        fs.append(f)</div><div class="line">    return fs</div><div class="line"></div><div class="line">f1, f2, f3 = count()</div><div class="line">print f1(), f2(), f3()</div></pre></td></tr></table></figure></p><h4 id="python中匿名函数"><a href="#python中匿名函数" class="headerlink" title="python中匿名函数"></a>python中匿名函数</h4><p>高阶函数可以接收函数做参数，有些时候，我们不需要显式地定义函数，直接传入匿名函数更方便。<br>在Python中，对匿名函数提供了有限支持。<br>关键字<font color="#ff0000">lambda</font> 表示匿名函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9])</div><div class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81]</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Python中可以把函数作为参数，则该函数被成为高阶函数。&quot;&gt;&lt;a href=&quot;#Python中可以把函数作为参数，则该函数被成为高阶函数。&quot; class=&quot;headerlink&quot; title=&quot;Python中可以把函数作为参数，则该函数被成为高阶函数。&quot;&gt;&lt;/a&gt;Python中可以把函数作为参数，则该函数被成为高阶函数。&lt;/h4&gt;&lt;p&gt;高阶函数中引入平方根函数的办法&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import math&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;from math import sqrt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;def add(x, y, f):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; f(x) + f(y)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; add(25, 9, sqrt)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;python中map-函数&quot;&gt;&lt;a href=&quot;#python中map-函数&quot; class=&quot;headerlink&quot; title=&quot;python中map()函数&quot;&gt;&lt;/a&gt;python中map()函数&lt;/h4&gt;&lt;p&gt;map()是 Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。&lt;/p&gt;
&lt;h5 id=&quot;利用map-函数，把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list：&quot;&gt;&lt;a href=&quot;#利用map-函数，把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list：&quot; class=&quot;headerlink&quot; title=&quot;利用map()函数，把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list：&quot;&gt;&lt;/a&gt;利用map()函数，把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list：&lt;/h5&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;def format_name(s):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; s.capitalize()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; s[:1].uppper()+s[1:].lower()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; map(format_name, [&lt;span class=&quot;string&quot;&gt;&#39;adam&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;LISA&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;barT&#39;&lt;/span&gt;])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Study" scheme="https://peihaibin.github.io/categories/Study/"/>
    
    
      <category term="python" scheme="https://peihaibin.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Setting up SSH for Git on Windows</title>
    <link href="https://peihaibin.github.io/2017/09/22/Setting-up-SSH-for-Git-on-Windows/"/>
    <id>https://peihaibin.github.io/2017/09/22/Setting-up-SSH-for-Git-on-Windows/</id>
    <published>2017-09-22T09:27:00.000Z</published>
    <updated>2017-09-25T04:46:25.790Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1:安装Hexo"></a>1:安装Hexo</h4><p>当安装完成Hexo时，准备通过hexo d 上传个人博客到github。</p><h4 id="2-发现问题"><a href="#2-发现问题" class="headerlink" title="2:发现问题"></a>2:发现问题</h4><p>当上传时，发现报错：“Permission denied (publickey)”<br><a id="more"></a></p><h4 id="3-解决办法"><a href="#3-解决办法" class="headerlink" title="3:解决办法"></a>3:解决办法</h4><p>应该是生成的sshkey没有引入到MinTTY，需要重新设置一下。</p><h4 id="4-开启ssh-agent服务"><a href="#4-开启ssh-agent服务" class="headerlink" title="4:开启ssh-agent服务"></a>4:开启ssh-agent服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">eval</span> `ssh-agent -s`</div></pre></td></tr></table></figure><h4 id="5-添加key到ssh-agent："><a href="#5-添加key到ssh-agent：" class="headerlink" title="5:添加key到ssh-agent："></a>5:添加key到ssh-agent：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-add ~/.ssh/keyfilename</div></pre></td></tr></table></figure><h4 id="6-验证是否正常"><a href="#6-验证是否正常" class="headerlink" title="6:验证是否正常"></a>6:验证是否正常</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-安装Hexo&quot;&gt;&lt;a href=&quot;#1-安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;1:安装Hexo&quot;&gt;&lt;/a&gt;1:安装Hexo&lt;/h4&gt;&lt;p&gt;当安装完成Hexo时，准备通过hexo d 上传个人博客到github。&lt;/p&gt;
&lt;h4 id=&quot;2-发现问题&quot;&gt;&lt;a href=&quot;#2-发现问题&quot; class=&quot;headerlink&quot; title=&quot;2:发现问题&quot;&gt;&lt;/a&gt;2:发现问题&lt;/h4&gt;&lt;p&gt;当上传时，发现报错：“Permission denied (publickey)”&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://peihaibin.github.io/tags/git/"/>
    
      <category term="publickey" scheme="https://peihaibin.github.io/tags/publickey/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://peihaibin.github.io/2017/09/21/hello-world/"/>
    <id>https://peihaibin.github.io/2017/09/21/hello-world/</id>
    <published>2017-09-21T04:46:46.000Z</published>
    <updated>2017-09-25T09:42:47.677Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>   <a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
