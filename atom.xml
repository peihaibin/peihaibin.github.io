<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  <subtitle>工作日志，自我管理，知识管理，时间管理，阅读写作，思维导图</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://peihaibin.github.io/"/>
  <updated>2018-12-14T07:43:25.606Z</updated>
  <id>https://peihaibin.github.io/</id>
  
  <author>
    <name>peihaibin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>路由表加载</title>
    <link href="https://peihaibin.github.io/2018/12/14/Route-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-01/"/>
    <id>https://peihaibin.github.io/2018/12/14/Route-学习笔记-01/</id>
    <published>2018-12-14T02:57:00.000Z</published>
    <updated>2018-12-14T07:43:25.606Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>#####路由表的加载</p><p>（1）对于同一条路由（掩码长度一致）<br>1.优先级和Metric都一样，都放入路由表中，执行负载均衡<br>2.优先级不同，只将优先级小的路由放入路由表中（优先级大的作为备份路由）<br>3.优先级相同，metric不同，路由表中只存放metric值小的路由（metric值大的路由作为备份路由）</p><font color="ff0000">先比优先级，再比Metric</font><p>（2）不同的路由（掩码长度不一致）<br>全都放入路由表中</p><font color="#ff00ff"><br>    优先级：区分不同种路由协议之间的可信度（越小可信度越高）<br>    Metric：区分同种路由协议的可信度（越小可信度越高）<br></font><br><a id="more"></a><br><br>#####数据包的选路<br><br>掩码最长匹配原则<br><br>2.2.2.0 24 static 60 0 13.1.1.3<br>2.2.2.2 32 static 200 0 12.1.1.2<br>通往2.2.2.2 的数据包优先通过12.1.1.2 路由发送出去。<br><br><br><br>#####路由汇总问题<br><br>明细网络号写成2进制，然后从左边最高位数起，明细网络号有多少bit是一致的，就是掩码位数。<br><br>172.168.12.0/24<br>172.168.13.0/24<br>172.168.14.0/24<br>172.168.15.0/24<br><br>最左边2个8位都是一致的，共16bit。<br>后面12 13 14 15 用2进制表示如下<br>128    64     32    16    8   4   2   1<br>0       0     0      0    1   1   0   0  12<br>0       0     0      0    1   1   0   1  13<br>0       0     0      0    1   1   1   0  14<br>0       0     0      0    1   1   1   1  15<br><br>相同bit位为6为，加上前面的16bit一共是22位bit一致。子网掩码就是22<br><br>汇总起始的网络号算法：<br>明细网络号有多少bit是一致的为分界，后面全部置为0，就是网络起始号。<br><br>上面的路由汇总就应该是172.168.12.0/22<br><br><font color="ff0000">汇总网络个数为2的多少次幂个。</font><font color="ff0000">不精确的路由汇总可能产生路由黑洞，进而可能产生环路问题。</font><p>#####路由分类<br>1.工作方式<br>静态路由<br>动态路由</p><p>2.工作位置<br>AS (自治系统)<br>一个逻辑管理域1-65535</p><p>IGP（内部网关协议）：运行在一个AS内部的路由选择协议<br>RIP、OSPF、ISIS</p><p>EGP（外部网关协议）：运行在AS与AS之间的路由选择协议。BGP（边界网关协议）</p><p>3.对网络的认识 </p><p>DV（distance vector距离矢量）：<br>只知道目的网络号的大概远近和方向<br>routing by romor （听信谣言），<br>依赖直连路由告诉我的路由信息来做选路判断，容易产生环路。<br>水平分割原则（缓解）：从本端口发出去的路由，不再由本端口学习。<br>RIP、BGP</p><p>LS（link state链路状态）：自主计算去往目标网络号的路径（SPF算法），不会形成环路。</p><p>OSPF：<br>区域内（SPF算法–LS 100%无环）<br>区域间（DV）</p><p>DV与LS的本质区别：<br>DV： 只知道自己直连路由器的方位<br>LS： 能知道全网的拓扑结构  ——区域内</p><p>4.传递路由的精确性、准确性：<br>（1）有类别（classful）：发送路由更新时不携带子网掩码信息，不精确 ripv1<br>（2） 无类别（classless）：发送路由更新时携带子网掩码信息，精确 ripv2、ospf、isis、BGP</p><p>OSI模型</p><p>七   应用层        telnet      ssh<br>          端口号     23         22<br>四   传输层       TCP        UDP       ICMP    OSPF         （端口号反映7层协议）<br>            协议号  6           17        1     89<br>三    网络层        ipv4      ipv6  （协议号反映四层协议）<br>             type   0X0080    0X86DD<br>二    数据链路层   type字段反映三层协议</p><p>ICMP、OSPF直接封装进三层IP包的，没有经过传输层封装。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;#####路由表的加载&lt;/p&gt;
&lt;p&gt;（1）对于同一条路由（掩码长度一致）&lt;br&gt;1.优先级和Metric都一样，都放入路由表中，执行负载均衡&lt;br&gt;2.优先级不同，只将优先级小的路由放入路由表中（优先级大的作为备份路由）&lt;br&gt;3.优先级相同，metric不同，路由表中只存放metric值小的路由（metric值大的路由作为备份路由）&lt;/p&gt;
&lt;font color=&quot;ff0000&quot;&gt;先比优先级，再比Metric&lt;/font&gt;

&lt;p&gt;（2）不同的路由（掩码长度不一致）&lt;br&gt;全都放入路由表中&lt;/p&gt;
&lt;font color=&quot;#ff00ff&quot;&gt;&lt;br&gt;    优先级：区分不同种路由协议之间的可信度（越小可信度越高）&lt;br&gt;    Metric：区分同种路由协议的可信度（越小可信度越高）&lt;br&gt;&lt;/font&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Route" scheme="https://peihaibin.github.io/categories/Route/"/>
    
    
      <category term="Route" scheme="https://peihaibin.github.io/tags/Route/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 安装升级java jdk 版本</title>
    <link href="https://peihaibin.github.io/2018/01/09/Linux-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-05/"/>
    <id>https://peihaibin.github.io/2018/01/09/Linux-学习笔记-05/</id>
    <published>2018-01-09T02:45:00.000Z</published>
    <updated>2018-01-09T02:49:50.574Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ubuntu-安装jdk"><a href="#ubuntu-安装jdk" class="headerlink" title="ubuntu 安装jdk"></a>ubuntu 安装jdk</h4><p>使用ppa/源方式安装<br><a id="more"></a></p><p>1.添加ppa</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:webupd8team/java</div><div class="line"></div><div class="line">sudo apt-get update</div></pre></td></tr></table></figure><p>2、.安装oracle-java-installer<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install oracle-java8-installer</div></pre></td></tr></table></figure></p><p>安装器会提示你同意 Oracle 的服务条款,选择 ok</p><p>然后选择yes 即可</p><p>如果你懒,不想自己手动点击.也可以加入下面的这条命令,默认同意条款:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> oracle-java8-installer shared/accepted-oracle-license-v1-1 select <span class="literal">true</span> | sudo /usr/bin/debconf-set-selections</div></pre></td></tr></table></figure><p>3、设置系统默认jdk<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo update-java-alternatives -s java-8-oracle</div></pre></td></tr></table></figure></p><p>如果即安装了jdk7,又安装了jdk8,要实现两者的切换,可以:</p><p>jdk8 切换到jdk7<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo update-java-alternatives -s java-7-oracle</div></pre></td></tr></table></figure></p><p>　jdk7 切换到jdk8<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo update-java-alternatives -s java-8-oracle</div></pre></td></tr></table></figure></p><p>4：测试jdk 是是否安装成功:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">java -version</div><div class="line">javac -version</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;ubuntu-安装jdk&quot;&gt;&lt;a href=&quot;#ubuntu-安装jdk&quot; class=&quot;headerlink&quot; title=&quot;ubuntu 安装jdk&quot;&gt;&lt;/a&gt;ubuntu 安装jdk&lt;/h4&gt;&lt;p&gt;使用ppa/源方式安装&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://peihaibin.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://peihaibin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>视频会议Mconf安装问题集</title>
    <link href="https://peihaibin.github.io/2017/12/19/%E8%A7%86%E9%A2%91%E4%BC%9A%E8%AE%AE%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0-01/"/>
    <id>https://peihaibin.github.io/2017/12/19/视频会议安装笔记-01/</id>
    <published>2017-12-19T01:00:00.000Z</published>
    <updated>2017-12-19T01:13:31.496Z</updated>
    
    <content type="html"><![CDATA[<p>1、E: 无法定位软件包 apache2-threaded-dev<br><a id="more"></a></p><p>使用sudo apt-get update后提示<br>mconf@hniois:/var/www/mconf-web/current$ sudo apt-get update<br>命中:1 <a href="http://cn.archive.ubuntu.com/ubuntu" target="_blank" rel="external">http://cn.archive.ubuntu.com/ubuntu</a> xenial InRelease<br>获取:2 <a href="http://cn.archive.ubuntu.com/ubuntu" target="_blank" rel="external">http://cn.archive.ubuntu.com/ubuntu</a> xenial-updates InRelease [102 kB]<br>获取:3 <a href="http://cn.archive.ubuntu.com/ubuntu" target="_blank" rel="external">http://cn.archive.ubuntu.com/ubuntu</a> xenial-backports InRelease [102 kB]<br>获取:4 <a href="http://cn.archive.ubuntu.com/ubuntu" target="_blank" rel="external">http://cn.archive.ubuntu.com/ubuntu</a> xenial-updates/main amd64 Packages [681 kB]<br>获取:5 <a href="http://security.ubuntu.com/ubuntu" target="_blank" rel="external">http://security.ubuntu.com/ubuntu</a> xenial-security InRelease [102 kB]<br>获取:6 <a href="http://cn.archive.ubuntu.com/ubuntu" target="_blank" rel="external">http://cn.archive.ubuntu.com/ubuntu</a> xenial-updates/main i386 Packages [639 kB]<br>获取:7 <a href="http://cn.archive.ubuntu.com/ubuntu" target="_blank" rel="external">http://cn.archive.ubuntu.com/ubuntu</a> xenial-updates/main amd64 DEP-11 Metadata [307 kB]<br>获取:8 <a href="http://cn.archive.ubuntu.com/ubuntu" target="_blank" rel="external">http://cn.archive.ubuntu.com/ubuntu</a> xenial-updates/main DEP-11 64x64 Icons [232 kB]<br>获取:9 <a href="http://cn.archive.ubuntu.com/ubuntu" target="_blank" rel="external">http://cn.archive.ubuntu.com/ubuntu</a> xenial-updates/universe amd64 Packages [565 kB]<br>获取:10 <a href="http://cn.archive.ubuntu.com/ubuntu" target="_blank" rel="external">http://cn.archive.ubuntu.com/ubuntu</a> xenial-updates/universe i386 Packages [530 kB]<br>获取:11 <a href="http://cn.archive.ubuntu.com/ubuntu" target="_blank" rel="external">http://cn.archive.ubuntu.com/ubuntu</a> xenial-updates/universe amd64 DEP-11 Metadata [185 kB]<br>获取:12 <a href="http://cn.archive.ubuntu.com/ubuntu" target="_blank" rel="external">http://cn.archive.ubuntu.com/ubuntu</a> xenial-updates/universe DEP-11 64x64 Icons [269 kB]<br>获取:13 <a href="http://cn.archive.ubuntu.com/ubuntu" target="_blank" rel="external">http://cn.archive.ubuntu.com/ubuntu</a> xenial-updates/multiverse amd64 DEP-11 Metadata [5,892 B]<br>获取:14 <a href="http://cn.archive.ubuntu.com/ubuntu" target="_blank" rel="external">http://cn.archive.ubuntu.com/ubuntu</a> xenial-backports/main amd64 DEP-11 Metadata [3,328 B]<br>获取:15 <a href="http://cn.archive.ubuntu.com/ubuntu" target="_blank" rel="external">http://cn.archive.ubuntu.com/ubuntu</a> xenial-backports/universe amd64 DEP-11 Metadata [4,716 B]<br>获取:16 <a href="http://security.ubuntu.com/ubuntu" target="_blank" rel="external">http://security.ubuntu.com/ubuntu</a> xenial-security/main amd64 DEP-11 Metadata [62.5 kB]<br>获取:17 <a href="http://security.ubuntu.com/ubuntu" target="_blank" rel="external">http://security.ubuntu.com/ubuntu</a> xenial-security/main DEP-11 64x64 Icons [57.6 kB]<br>获取:18 <a href="http://security.ubuntu.com/ubuntu" target="_blank" rel="external">http://security.ubuntu.com/ubuntu</a> xenial-security/universe amd64 DEP-11 Metadata [51.3 kB]<br>获取:19 <a href="http://security.ubuntu.com/ubuntu" target="_blank" rel="external">http://security.ubuntu.com/ubuntu</a> xenial-security/universe DEP-11 64x64 Icons [85.1 kB]<br>直接打开 <a href="http://cn.archive.ubuntu.com/ubuntu" target="_blank" rel="external">http://cn.archive.ubuntu.com/ubuntu</a> 发现无法打开。<br>通过 sudo sed -e ‘s|<a href="http://cn|http://us|g" target="_blank" rel="external">http://cn|http://us|g</a>‘ -i /etc/apt/sources.list命令修改 apt-get 的sources为<br>us.archive.ubuntu.com/ubuntu</p><p>还原可使用sudo sed -e ‘s|<a href="http://us|http://cn|g" target="_blank" rel="external">http://us|http://cn|g</a>‘ -i /etc/apt/sources.list命令</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、E: 无法定位软件包 apache2-threaded-dev&lt;br&gt;
    
    </summary>
    
      <category term="Conference" scheme="https://peihaibin.github.io/categories/Conference/"/>
    
    
      <category term="视频会议" scheme="https://peihaibin.github.io/tags/%E8%A7%86%E9%A2%91%E4%BC%9A%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>安装pyspider</title>
    <link href="https://peihaibin.github.io/2017/11/16/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-14/"/>
    <id>https://peihaibin.github.io/2017/11/16/Python-学习笔记-14/</id>
    <published>2017-11-16T05:10:00.000Z</published>
    <updated>2017-11-16T05:28:51.255Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>龙芯服务器上安装pyspider</p><a id="more"></a><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>1: 安装依赖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install python python-pip python-devel python-distribute libxml2-devel python-lxml gcc libxslt-devel  openssl openssl-devel</div></pre></td></tr></table></figure></p><p>2:升级pip<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#pip install --upgrade pip</span></div></pre></td></tr></table></figure></p><p>3:在线安装pyspider<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#pip install pyspider</span></div></pre></td></tr></table></figure></p><p>4:phantomjs安装</p><p>a:安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#yum -y install gcc gcc-c++ make flex bison gperf ruby \</span></div><div class="line">openssl-devel freetype-devel fontconfig-devel libicu-devel sqlite-devel \</div><div class="line">libpng-devel libjpeg-devel</div></pre></td></tr></table></figure><p>b:安装phantomjs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#git clone git://github.com/ariya/phantomjs.git</span></div><div class="line"><span class="comment">#cd phantomjs</span></div><div class="line"><span class="comment">#git checkout 2.1.1</span></div><div class="line"><span class="comment">#git submodule init</span></div><div class="line"><span class="comment">#git submodule update</span></div><div class="line"><span class="comment">#python build.py</span></div></pre></td></tr></table></figure><p>c:复制可执行文件到/usr/local/bin目录</p><p>没有此步骤的话，执行pysider 会提示 phantomjs not found<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># copy bin/phantomjs /usr/local/bin/</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;龙芯服务器上安装pyspider&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="https://peihaibin.github.io/categories/Study/"/>
    
    
      <category term="python" scheme="https://peihaibin.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Linux Nginx负载均衡</title>
    <link href="https://peihaibin.github.io/2017/11/14/Linux-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-04/"/>
    <id>https://peihaibin.github.io/2017/11/14/Linux-学习笔记-04/</id>
    <published>2017-11-14T06:10:00.000Z</published>
    <updated>2017-11-14T07:43:44.183Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>Nginx 是一个高性能的 Web 和反向代理服务器, 它具有有很多非常优越的特性:</p><p><b>作为 Web 服务器</b>：相比 Apache，Nginx 使用更少的资源，支持更多的并发连接，体现更高的效率，这点使 Nginx 尤其受到虚拟主机提供商的欢迎。能够支持高达 50,000 个并发连接数的响应，感谢 Nginx 为我们选择了 epoll and kqueue 作为开发模型.</p><p><b>作为负载均衡服务器</b>：Nginx 既可以在内部直接支持 Rails 和 PHP，也可以支持作为 HTTP代理服务器 对外进行服务。Nginx 用 C 编写, 不论是系统资源开销还是 CPU 使用效率都比 Perlbal 要好的多。</p><p><b>作为邮件代理服务器</b>: Nginx 同时也是一个非常优秀的邮件代理服务器（最早开发这个产品的目的之一也是作为邮件代理服务器），Last.fm 描述了成功并且美妙的使用经验。</p><p>Nginx 安装非常的简单，配置文件 非常简洁（还能够支持perl语法），Bugs非常少的服务器: Nginx 启动特别容易，并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动。你还能够在 不间断服务的情况下进行软件版本的升级。</p><p>nginx不单可以作为强大的web服务器，也可以作为一个反向代理服务器，<br>而且nginx还可以按照调度规则实现动态、静态页面的分离，<br>可以按照轮询、ip哈希、URL哈希、权重等多种方式对后端服务器做负载均衡，同时还支持后端服务器的健康检查。<br><a id="more"></a></p><h4 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h4><p>nginx的upstream目前支持的5种方式的分配</p><p>1、轮询（默认）<br>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。<br>upstream backserver {<br>server 192.168.0.14;<br>server 192.168.0.15;<br>} </p><p>2、指定权重<br>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。<br>upstream backserver {<br>server 192.168.0.14 weight=10;<br>server 192.168.0.15 weight=10;<br>} </p><p>3、IP绑定 ip_hash<br>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。<br>upstream backserver {<br>ip_hash;<br>server 192.168.0.14:88;<br>server 192.168.0.15:80;<br>} </p><p>4、fair（第三方）<br>按后端服务器的响应时间来分配请求，响应时间短的优先分配。<br>upstream backserver {<br>server server1;<br>server server2;<br>fair;<br>} </p><p>5、url_hash（第三方）<br>按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。<br>upstream backserver {<br>server squid1:3128;<br>server squid2:3128;<br>hash $request_uri;<br>hash_method crc32;<br>} 。</p><h4 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h4><p>nginx可以使用各平台的默认包来安装，<br>本文是介绍使用源码编译安装，包括具体的编译参数信息。</p><p>1、安装Nginx时必须县安装相应的编译工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost ~]$ sudo yum -y install gcc gcc-c++ autoconf automake</div><div class="line">[hniois@localhost ~]$ sudo yum -y install zlib zlib-devel openssl openssl-devel pcre pcre-devel</div></pre></td></tr></table></figure><p>zlib: nginx提供gzip模块，需要zlib库支持<br>openssl: nginx提供ssl功能<br>pcre: 支持地址重写rewrite功能</p><p>2、解压nginx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost ~]$ tar -zxvf nginx-1.10.2.tar.gz  -C /usr/<span class="built_in">local</span>/src/</div></pre></td></tr></table></figure></p><p>3、编译安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost nginx-1.10.2]<span class="comment"># ./configure --prefix=/usr/local/nginx \</span></div><div class="line">--with-http_dav_moudule \</div><div class="line">--with-http_stub_status_module \</div><div class="line">--with-http_addition_module \</div><div class="line">--with-http_sub_module \</div><div class="line">--with-http_flv_module \</div><div class="line">--with-http_mp4_module \</div><div class="line">--with-http_ssl_module </div><div class="line">[hniois@localhost nginx-1.10.2]<span class="comment"># make -j 4</span></div><div class="line">[hniois@localhost nginx-1.10.2]<span class="comment"># make install</span></div></pre></td></tr></table></figure></p><p>–with-http_dav_module 启用ngx_http_dav_module支持（增加PUT,DELETE,MKCOL：创建集合,COPY和MOVE方法）默认情况下为关闭，需编译开启<br>–with-http_stub_status_module 启用ngx_http_stub_status_module支持（获取nginx自上次启动以来的工作状态）<br>–with-http_addition_module 启用ngx_http_addition_module支持（作为一个输出过滤器，支持不完全缓冲，分部分响应请求）<br>–with-http_sub_module 启用ngx_http_sub_module支持（允许用一些其他文本替换nginx响应中的一些文本）<br>–with-http_flv_module 启用ngx_http_flv_module支持（提供寻求内存使用基于时间的偏移量文件）<br>–with-http_mp4_module 启动MP4模块，使客户端可以观看，拖动MP4视频<br>–with-http_ssl_module 启用ngx_http_ssl_module支持（使支持https请求，需已安装openssl）</p><p>4：创建运行nginx的用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># sudo useradd -u 8000 -s /sbin/nologin nginx</span></div><div class="line">[root@localhost ~]<span class="comment"># id !$</span></div></pre></td></tr></table></figure></p><p>5：启动nginx。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost nginx]<span class="comment"># /sbin/nginx</span></div><div class="line">[hniois@localhost nginx]<span class="comment"># netstat -atnup | grep 80</span></div></pre></td></tr></table></figure></p><p>6：设置开机启动nginx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost nginx]<span class="comment"># echo "/usr/local/nginx/sbin/nginx &amp;" &gt;&gt; /etc/rc.local</span></div><div class="line">[hniois@localhost nginx]<span class="comment"># cat !$</span></div></pre></td></tr></table></figure></p><p>7：nginx日常操作</p><p>a:检查配置文件是否正确<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost nginx]$ sudo ./sbin/nginx -t</div></pre></td></tr></table></figure></p><p>b:Nginx 重载配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost nginx]$ sudo ./sbin/nginx -s reload</div></pre></td></tr></table></figure></p><p>c：停止 Nginx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost nginx]$ sudo ./sbin/nginx -s stop</div></pre></td></tr></table></figure></p><p>8：配置nginx成为分发器，实现动静分离</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;Nginx 是一个高性能的 Web 和反向代理服务器, 它具有有很多非常优越的特性:&lt;/p&gt;
&lt;p&gt;&lt;b&gt;作为 Web 服务器&lt;/b&gt;：相比 Apache，Nginx 使用更少的资源，支持更多的并发连接，体现更高的效率，这点使 Nginx 尤其受到虚拟主机提供商的欢迎。能够支持高达 50,000 个并发连接数的响应，感谢 Nginx 为我们选择了 epoll and kqueue 作为开发模型.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;作为负载均衡服务器&lt;/b&gt;：Nginx 既可以在内部直接支持 Rails 和 PHP，也可以支持作为 HTTP代理服务器 对外进行服务。Nginx 用 C 编写, 不论是系统资源开销还是 CPU 使用效率都比 Perlbal 要好的多。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;作为邮件代理服务器&lt;/b&gt;: Nginx 同时也是一个非常优秀的邮件代理服务器（最早开发这个产品的目的之一也是作为邮件代理服务器），Last.fm 描述了成功并且美妙的使用经验。&lt;/p&gt;
&lt;p&gt;Nginx 安装非常的简单，配置文件 非常简洁（还能够支持perl语法），Bugs非常少的服务器: Nginx 启动特别容易，并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动。你还能够在 不间断服务的情况下进行软件版本的升级。&lt;/p&gt;
&lt;p&gt;nginx不单可以作为强大的web服务器，也可以作为一个反向代理服务器，&lt;br&gt;而且nginx还可以按照调度规则实现动态、静态页面的分离，&lt;br&gt;可以按照轮询、ip哈希、URL哈希、权重等多种方式对后端服务器做负载均衡，同时还支持后端服务器的健康检查。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://peihaibin.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://peihaibin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux LVS-NAT集群</title>
    <link href="https://peihaibin.github.io/2017/11/08/Linux-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-03/"/>
    <id>https://peihaibin.github.io/2017/11/08/Linux-学习笔记-03/</id>
    <published>2017-11-08T07:10:00.000Z</published>
    <updated>2017-11-09T04:39:26.139Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>集群（Cluster）是一组计算机，它们作为一个整体向用户提供一组网络资源。这些单个的计算机系统就是集群的节点（node）。</p><p>集群的分类</p><ul><li>负载均衡（Load Balance）集群，LB集群</li><li>高可用（High Availability）集群，HA集群</li><li>高性能计算（High Performance Computing）集群，HPC集群</li></ul><a id="more"></a><p>LB 实现手段</p><ul><li>硬件： F5 负载均衡器</li><li>软件： <ul><li>LVS（4层，传输层）<ul><li>VS/NAT</li><li>VS/DR</li><li>VS/TUN</li></ul></li><li>Nginx（7层，应用层）</li></ul></li></ul><h4 id="LVS："><a href="#LVS：" class="headerlink" title="LVS："></a>LVS：</h4><p>LVS（Linux Virtual Server），即Linux虚拟服务器，是一个虚拟的服务器集群系统。</p><p>LVS 集群采用三层结构：</p><ul><li>A： 负载调度器/分发器(load balancer)<br>它是整个集群对外面的前端机，负责将客户的请求发送到一组服务器上执行，而客户机认为这些服务是来自一个IP地址（称之为VIP虚拟IP）上的。</li><li>B: 服务器池（server pool)<br>是一组真正执行客户请求的服务器，执行的服务可以是WEB、MAIL、FTP、DNS等。</li><li>C： 共享存储（shared storage）<br>为服务器池提供一个共享的存储区，这样很容易使得服务器池拥有相同的内容，提供相同的服务。</li></ul><p>LVS 负载均衡的三种包转发方式：</p><ul><li>NAT（网络地址映射）</li><li>IP Tunnelling（IP隧道）</li><li>Direct Routing（直接路由）</li></ul><p>不同的转发模式决定了不同的cluster的网络结构。</p><p>1.NAT模式<br>网络地址转换，工作在网络层（三层），只有VIP是公网IP，其余都是私网IP，Real Server指定LVS为网关，LVS开启路由转发，源和目标地址转换，数据的进出期间,无论是进来的流量,还是出去的流量，都必须经过DR，会产生一种瓶颈，适合小网络，规模10台左右。<br>工作原理：</p><p>1&gt;.用户发送请求报文到LVS的VIP上，VIP选择一个Real Server，并记录连接信息到hash表中，然后修改用户的请求报文的目的IP地址为Real Server的地址，将请求发给Real Server;</p><p>2&gt;.Real Server收到请求报文包后，发现目的IP是自己的IP，于是处理请求，然后发送reply给LVS;</p><p>3&gt;.LVS收到reply包后，修改reply包的的源地址为VIP，发送给用户;</p><p>4&gt;.从用户来的属于本次连接的包，查hash表，然后发给对应的Real Server。</p><p>5&gt;.当用户发送完毕，此次连接结束或者连接超时，那么LVS自动从hash表中删除此条记录。</p><p>优点：集群中的物理服务器可以使用任何支持TCP/IP操作系统，只有负载均衡器需要一个合法的IP地址。</p><p>缺点：扩展性有限。当服务器节点（普通PC服务器）增长过多时,负载均衡器将成为整个系统的瓶颈，因为所有的请求包和应答包的流向都经过负载均衡器。当服务器节点过多时，大量的数据包都交汇在负载均衡器那，速度就会变慢！</p><p>2.DR模式</p><p>直接路由模式，工作在TCP/IP数据链路层(二层)，必须都是公网ip，要求是同网段（因为DR是转发给RS的，是在数据链路层实现的，DR要对二层包头进行改换，所以DR和Real Server必须在一个广播域下）。不需要路由转发。需要关闭arp解析（抑制arp帧），客户请求处理后直接返回给客户。规模几十台左右。</p><p>工作原理：</p><p>1&gt;.当一个用户发送一个WEB请求到VIP；</p><p>2&gt;.LVS服务器根据VIP选择对应的Real Server的Pool，根据算法，在Pool中选择一台Real Server，并将这台Real Server的MAC地址作为目的MAC地址，重新将IP包封装成帧转给Real Server，LVS在hash表中记录该次连接；</p><p>3&gt;.然后将用户的请求包发给选择的Real Server；</p><p>4&gt;.最后选择的Real Server把应答包直接传给用户；</p><p>5&gt;.当用户继续发包过来时，LVS根据更才记录的hash表的信息，将属于此次连接的请求直接发到刚才选择的Real Server上；当连接中止或者超时，hash表中的记录将被删除。</p><p>优点：和TUN（隧道模式）一样，负载均衡器也只是分发请求，应答包通过单独的路由方法返回给客户端。与VS-TUN相比，VS-DR这种实现方式不需要隧道结构，因此可以使用大多数操作系统做为物理服务器。</p><p>缺点：（不能说缺点，只能说是不足）要求负载均衡器的网卡必须与物理网卡在一个物理段上。</p><p>3.IP隧道模式</p><p>ip-tun模式，工作在网络层（三层），网卡需要具备tun隧道协议网卡，系统支持ip隧道，增加了数据传输时间，必须都是公网ip，可以是不同网段，跨路由，分散互联网不同位置，不需要路由转发。规模几十台左右。<br>工作原理：</p><p>1&gt;用户发送请求报文包到LVS服务器的VIP上。</p><p>2&gt;.VIP按照算法选择后端的一个Real Server，将用户的请求报文包封装到一个新的IP包里，新IP包的目的IP是Real Server的IP，然后转发给Real Server，并将记录一条消息到hash表中。</p><p>3&gt;.Real Server收到包后，解封装，取出用户的请求报文包，发现他的目的地址是VIP，而Real Server发现在自己的lo:0口上有这个IP地址，于是处理用户的请求，然后将relpy这个请求报文包直接发给用户。</p><p>4&gt;.该用户的后面的请求报文包，LVS直接按照hash表中的记录直接转发给Real Server，当传输完毕或者连接超时，那么将删除hash表中的记录。</p><p>优点：负载均衡器只负责将请求包分发给后端节点服务器，而RS将应答包直接发给用户。所以，减少了负载均衡器的大量数据流动，负载均衡器不再是系统的瓶颈，就能处理很巨大的请求量，这种方式，一台负载均衡器能够为很多RS进行分发。而且跑在公网上就能进行不同地域的分发。</p><p>缺点：隧道模式的RS节点需要合法IP，这种方式需要所有的服务器支持”IP Tunneling”(IP Encapsulation)协议，服务器可能只局限在部分Linux系统上。</p><h4 id="配置分发器"><a href="#配置分发器" class="headerlink" title="配置分发器"></a>配置分发器</h4><p>1、打开路由转发功能<br>编辑 /etc/sysctl.conf 文件加入以下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">net.ipv4.ip_forward=1</div><div class="line">net.ipv4.conf.all.rp_filter=0</div><div class="line">net.ipv4.conf.default.rp_filter=0</div></pre></td></tr></table></figure></p><p>2、配置网络环境：<br>配置两个网卡：<br>eth0 192.168.1.10 模式：br0  模拟公网<br>eth1 192.168.2.20 模式：vmnet4 模拟私网</p><p>3、安装LVS管理工具：IPVSadmin<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># rpm -ivh /mnt/Packages/ipvsadm-1.27-7.el7.x86_64.rpm </span></div><div class="line">准备中...                          <span class="comment">################################# [100%]</span></div><div class="line">正在升级/安装...</div><div class="line">   1:ipvsadm-1.27-7.el7</div><div class="line"><span class="comment">################################# [100%]</span></div><div class="line">[root@localhost ~]<span class="comment">#</span></div></pre></td></tr></table></figure></p><p>4：命令设置规则<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># ipvsadm -A -t 192.168.1.10:80 -s rr</span></div><div class="line">[root@localhost ~]<span class="comment"># ipvsadm -a -t 192.168.1.10:80 -r 192.168.2.21:80 -m</span></div><div class="line">[root@localhost ~]<span class="comment"># ipvsadm -a -t 192.168.1.10:80 -r 192.168.2.22:80 -m</span></div></pre></td></tr></table></figure></p><p>选项：<br>-A –add-service 在内核的虚拟服务器表中添加一条新的虚拟服务器记录。也就是增加一台新的虚拟服务器。<br>-a –add-server 在内核虚拟服务器表的一条记录里添加一条新的真实服务器记录。<br>    也就是在一个虚拟服务器中增加一台新的真实服务器<br>-t –tcp-service service-address 说明虚拟服务器提供的是tcp 的服务<br>     [vip:port] or [real-server-ip:port]<br>-u –udp-service service-address 说明虚拟服务器提供的是udp 的服务<br>     [vip:port] or [real-server-ip:port]<br>-r –real-server server-address 真实的服务器[Real-Server:port]<br>-s –scheduler scheduler 使用的调度算法，有这样几个选项<br>     rr|wrr|lc|wlc|lblc|lblcr|dh|sh|sed|nq,<br>     默认的调度算法是： wlc.<br>-g –gatewaying 指定LVS 的工作模式为直接路由模式（也是LVS 默认的模式）<br>-i –ipip 指定LVS 的工作模式为隧道模式<br>-m –masquerading 指定LVS 的工作模式为NAT 模式<br>-D –delete-service 删除内核虚拟服务器表中的一条虚拟服务器记录。<br>-d –delete-server 删除一条虚拟服务器记录中的某条真实服务器记录<br>-L|-l –list 显示内核虚拟服务器表<br>-C –clear 清除内核虚拟服务器表中的所有记录。<br>-R –restore 恢复虚拟服务器规则<br>-S –save 保存虚拟服务器规则，输出为-R 选项可读的格式<br>–stats 显示统计信息<br>–rate 显示速率信息<br>-Z –zero 虚拟服务表计数器清零（清空当前的连接数量等）</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;集群（Cluster）是一组计算机，它们作为一个整体向用户提供一组网络资源。这些单个的计算机系统就是集群的节点（node）。&lt;/p&gt;
&lt;p&gt;集群的分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负载均衡（Load Balance）集群，LB集群&lt;/li&gt;
&lt;li&gt;高可用（High Availability）集群，HA集群&lt;/li&gt;
&lt;li&gt;高性能计算（High Performance Computing）集群，HPC集群&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://peihaibin.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://peihaibin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux DNS服务器配置</title>
    <link href="https://peihaibin.github.io/2017/11/07/Linux-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-02/"/>
    <id>https://peihaibin.github.io/2017/11/07/Linux-学习笔记-02/</id>
    <published>2017-11-07T07:10:00.000Z</published>
    <updated>2017-11-09T04:39:36.949Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>DNS(Domain Name System) 域名系统， 在TCP/IP 网络中有非常重要的地位，能提供域名与IP之间的解析服务。</p><p>DNS是一个分布式数据库，命名系统采用层次的逻辑结构，如同一颗倒置的树，这个逻辑的树形结构称为域名空间，<br>由于DNS划分了域名空间，所以各机构可以使用自己的域名空间创建DNS信息。</p><p>注：DNS域名空间中，树的最大深度不能超过127层，树中每个节点最长可以存储63个字符。</p><a id="more"></a><h4 id="端口号："><a href="#端口号：" class="headerlink" title="端口号："></a>端口号：</h4><font color="#ff0000"><br>    tcp/53  udp/53       #用于客户端查询<br>    tcp/953 udp/953      #用于DNS主从同步<br></font><h4 id="安装DNS"><a href="#安装DNS" class="headerlink" title="安装DNS"></a>安装DNS</h4><p>BIND 简介<br>BIND全称为Berkeley Internet Name Domain（伯克利因特网名称域系统）。<br>BIND主要有三个版本：BIND4，BIND8，BIND9。</p><p>DNS 服务的主程序包安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost mnt]$ sudo rpm -ivh /mnt/Packages/<span class="built_in">bind</span>-9.9.4-50.el7.x86_64.rpm </div><div class="line">准备中...                          <span class="comment">################################# [100%]</span></div><div class="line">正在升级/安装...</div><div class="line">   1:<span class="built_in">bind</span>-32:9.9.4-50.el7</div><div class="line"><span class="comment">################################# [100%]</span></div></pre></td></tr></table></figure></p><p>为了安全性，需要安装:bind-chroot<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost mnt]$ sudo rpm -ivh /mnt/Packages/<span class="built_in">bind</span>-chroot-9.9.4-50.el7.x86_64.rpm </div><div class="line">准备中...                          <span class="comment">################################# [100%]</span></div><div class="line">正在升级/安装...</div><div class="line">   1:<span class="built_in">bind</span>-chroot-32:9.9.4-50.el7</div><div class="line"><span class="comment">################################# [100%]</span></div></pre></td></tr></table></figure></p><p>默认已经安装的客户端工具utils<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost mnt]$ rpm -qa|grep <span class="built_in">bind</span></div><div class="line">keybinder3-0.3.0-1.el7.x86_64</div><div class="line"><span class="built_in">bind</span>-license-9.9.4-50.el7.noarch</div><div class="line"><span class="built_in">bind</span>-libs-9.9.4-50.el7.x86_64</div><div class="line"><span class="built_in">bind</span>-chroot-9.9.4-50.el7.x86_64</div><div class="line">rpcbind-0.2.0-42.el7.x86_64</div><div class="line"><span class="built_in">bind</span>-libs-lite-9.9.4-50.el7.x86_64</div><div class="line">&lt;font color=<span class="string">"#ff0000"</span>&gt;<span class="built_in">bind</span>-utils-9.9.4-50.el7.x86_64&lt;/font&gt;</div><div class="line"><span class="built_in">bind</span>-9.9.4-50.el7.x86_64</div></pre></td></tr></table></figure></p><p>DNS服务器配置文件</p><p>主配置文件位置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost mnt]$ ls /etc/named.conf </div><div class="line">/etc/named.conf</div></pre></td></tr></table></figure></p><p>服务器的启动和关闭<br>1:启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost ~]$ sudo systemctl start named.service</div></pre></td></tr></table></figure></p><p>开启named服务后，会自动挂载，调用chroot功能切换根：<br>mount查看文件挂载<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost mnt]$ mount</div><div class="line">sysfs on /sys <span class="built_in">type</span> sysfs (rw,nosuid,nodev,noexec,relatime)</div><div class="line">proc on /proc <span class="built_in">type</span> proc (rw,nosuid,nodev,noexec,relatime)</div><div class="line">devtmpfs on /dev <span class="built_in">type</span> devtmpfs (rw,nosuid,size=484668k,nr_inodes=121167,mode=755)</div><div class="line">securityfs on /sys/kernel/security <span class="built_in">type</span> securityfs (rw,nosuid,nodev,noexec,relatime)</div><div class="line">tmpfs on /dev/shm <span class="built_in">type</span> tmpfs (rw,nosuid,nodev)</div><div class="line">devpts on /dev/pts <span class="built_in">type</span> devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)</div><div class="line">tmpfs on /run <span class="built_in">type</span> tmpfs (rw,nosuid,nodev,mode=755)</div><div class="line">tmpfs on /sys/fs/cgroup <span class="built_in">type</span> tmpfs (ro,nosuid,nodev,noexec,mode=755)</div><div class="line">cgroup on /sys/fs/cgroup/systemd <span class="built_in">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,xattr,release_agent=/usr/lib/systemd/systemd-cgroups-agent,name=systemd)</div><div class="line">pstore on /sys/fs/pstore <span class="built_in">type</span> pstore (rw,nosuid,nodev,noexec,relatime)</div><div class="line">···</div><div class="line">configfs on /sys/kernel/config <span class="built_in">type</span> configfs (rw,relatime)</div><div class="line">/dev/sda3 on / <span class="built_in">type</span> btrfs (rw,relatime,space_cache,subvolid=258,subvol=/root)</div><div class="line">systemd-1 on /proc/sys/fs/binfmt_misc <span class="built_in">type</span> autofs (rw,relatime,fd=36,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=9670)</div><div class="line">debugfs on /sys/kernel/debug <span class="built_in">type</span> debugfs (rw,relatime)</div><div class="line">mqueue on /dev/mqueue <span class="built_in">type</span> mqueue (rw,relatime)</div><div class="line">hugetlbfs on /dev/hugepages <span class="built_in">type</span> hugetlbfs (rw,relatime)</div><div class="line">nfsd on /proc/fs/nfsd <span class="built_in">type</span> nfsd (rw,relatime)</div><div class="line">/dev/sda3 on /home <span class="built_in">type</span> btrfs (rw,relatime,space_cache,subvolid=257,subvol=/home)</div><div class="line">/dev/sda1 on /boot <span class="built_in">type</span> xfs (rw,relatime,attr2,inode64,noquota)</div><div class="line">sunrpc on /var/lib/nfs/rpc_pipefs <span class="built_in">type</span> rpc_pipefs (rw,relatime)</div><div class="line">tmpfs on /run/user/42 <span class="built_in">type</span> tmpfs (rw,nosuid,nodev,relatime,size=99972k,mode=700,uid=42,gid=42)</div><div class="line">tmpfs on /run/user/1000 <span class="built_in">type</span> tmpfs (rw,nosuid,nodev,relatime,size=99972k,mode=700,uid=1000,gid=1000)</div><div class="line">&lt;font color=<span class="string">"#ff0000"</span>&gt;/dev/sr0 on /mnt <span class="built_in">type</span> iso9660 (ro,relatime)</div><div class="line">/dev/sda3 on /var/named/chroot/etc/localtime <span class="built_in">type</span> btrfs (rw,relatime,space_cache,subvolid=258,subvol=/root/usr/share/zoneinfo/Asia/Shanghai)</div><div class="line">/dev/sda3 on /var/named/chroot/etc/named <span class="built_in">type</span> btrfs (rw,relatime,space_cache,subvolid=258,subvol=/root/etc/named)</div><div class="line">/dev/sda3 on /var/named/chroot/etc/named.root.key <span class="built_in">type</span> btrfs (rw,relatime,space_cache,subvolid=258,subvol=/root/etc/named.root.key)</div><div class="line">/dev/sda3 on /var/named/chroot/etc/named.conf <span class="built_in">type</span> btrfs (rw,relatime,space_cache,subvolid=258,subvol=/root/etc/named.conf)</div><div class="line">/dev/sda3 on /var/named/chroot/etc/named.rfc1912.zones <span class="built_in">type</span> btrfs (rw,relatime,space_cache,subvolid=258,subvol=/root/etc/named.rfc1912.zones)</div><div class="line">/dev/sda3 on /var/named/chroot/etc/rndc.key <span class="built_in">type</span> btrfs (rw,relatime,space_cache,subvolid=258,subvol=/root/etc/rndc.key)</div><div class="line">/dev/sda3 on /var/named/chroot/usr/lib64/<span class="built_in">bind</span> <span class="built_in">type</span> btrfs (rw,relatime,space_cache,subvolid=258,subvol=/root/usr/lib64/<span class="built_in">bind</span>)</div><div class="line">/dev/sda3 on /var/named/chroot/etc/named.iscdlv.key <span class="built_in">type</span> btrfs (rw,relatime,space_cache,subvolid=258,subvol=/root/etc/named.iscdlv.key)</div><div class="line">tmpfs on /var/named/chroot/run/named <span class="built_in">type</span> tmpfs (rw,nosuid,nodev,mode=755)</div><div class="line">/dev/sda3 on /var/named/chroot/var/named <span class="built_in">type</span> btrfs (rw,relatime,space_cache,subvolid=258,subvol=/root/var/named)</div><div class="line">/dev/sda3 on /var/named/chroot/etc/protocols <span class="built_in">type</span> btrfs (rw,relatime,space_cache,subvolid=258,subvol=/root/etc/protocols)</div><div class="line">/dev/sda3 on /var/named/chroot/etc/services <span class="built_in">type</span> btrfs (rw,relatime,space_cache,subvolid=258,subvol=/root/etc/services)&lt;/font&gt;</div></pre></td></tr></table></figure></p><p>2:关闭<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost ~]$ sudo systemctl stop named.service</div></pre></td></tr></table></figure></p><p>3:重启<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost ~]$ sudo systemctl restart named.service</div></pre></td></tr></table></figure></p><p>4:服务当前状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost mnt]$ sudo systemctl status named.service </div><div class="line">● named.service - Berkeley Internet Name Domain (DNS)</div><div class="line">   Loaded: loaded (/usr/lib/systemd/system/named.service; disabled; vendor preset: disabled)</div><div class="line">   Active: active (running) since 二 2017-11-07 14:45:46 CST; 5s ago</div><div class="line">  Process: 16151 ExecStart=/usr/sbin/named -u named -c <span class="variable">$&#123;NAMEDCONF&#125;</span> <span class="variable">$OPTIONS</span> (code=exited, status=0/SUCCESS)</div><div class="line">  Process: 16146 ExecStartPre=/bin/bash -c <span class="keyword">if</span> [ ! <span class="string">"<span class="variable">$DISABLE_ZONE_CHECKING</span>"</span> == <span class="string">"yes"</span> ]; <span class="keyword">then</span> /usr/sbin/named-checkconf -z <span class="string">"<span class="variable">$NAMEDCONF</span>"</span>; <span class="keyword">else</span> <span class="built_in">echo</span> <span class="string">"Checking of zone files is disabled"</span>; <span class="keyword">fi</span> (code=exited, status=0/SUCCESS)</div><div class="line"> Main PID: 16152 (named)</div><div class="line">   CGroup: /system.slice/named.service</div><div class="line">           └─16152 /usr/sbin/named -u named -c /etc/named.conf</div><div class="line"></div><div class="line">11月 07 14:45:46 localhost.localdomain named[16152]: <span class="built_in">command</span> channel listening on ...3</div><div class="line">11月 07 14:45:46 localhost.localdomain named[16152]: managed-keys-zone: loaded ser...0</div><div class="line">11月 07 14:45:46 localhost.localdomain named[16152]: zone 0.in-addr.arpa/IN: loade...0</div><div class="line">11月 07 14:45:46 localhost.localdomain named[16152]: zone 1.0.0.127.in-addr.arpa/I...0</div><div class="line">11月 07 14:45:46 localhost.localdomain named[16152]: zone localhost/IN: loaded ser...0</div><div class="line">11月 07 14:45:46 localhost.localdomain named[16152]: zone 1.0.0.0.0.0.0.0.0.0.0.0....0</div><div class="line">11月 07 14:45:46 localhost.localdomain named[16152]: zone localhost.localdomain/IN...0</div><div class="line">11月 07 14:45:46 localhost.localdomain named[16152]: all zones loaded</div><div class="line">11月 07 14:45:46 localhost.localdomain named[16152]: running</div><div class="line">11月 07 14:45:46 localhost.localdomain systemd[1]: Started Berkeley Internet Name ....</div><div class="line">Hint: Some lines were ellipsized, use -l to show <span class="keyword">in</span> full.</div></pre></td></tr></table></figure></p><p>如果当前服务正在运行，如何不重启服务，加载新的配置文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost ~]$ systemctl reload named.service</div></pre></td></tr></table></figure></p><p>开机启动服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost ~]$ systemctl <span class="built_in">enable</span> named.service</div></pre></td></tr></table></figure></p><p>查看端口号：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@localhost named]<span class="comment"># netstat -antup | grep 53</span></div><div class="line">tcp        0      0 127.0.0.1:53            0.0.0.0:*               LISTEN      16152/named         </div><div class="line">tcp        0      0 192.168.122.1:53        0.0.0.0:*               LISTEN      1220/dnsmasq        </div><div class="line">tcp        0      0 127.0.0.1:953           0.0.0.0:*               LISTEN      16152/named         </div><div class="line">tcp6       0      0 ::1:53                  :::*                    LISTEN      16152/named         </div><div class="line">tcp6       0      0 ::1:953                 :::*                    LISTEN      16152/named         </div><div class="line">udp        0      0 127.0.0.1:53            0.0.0.0:*                           16558/named         </div><div class="line">udp        0      0 127.0.0.1:53            0.0.0.0:*                           16152/named         </div><div class="line">udp        0      0 192.168.122.1:53        0.0.0.0:*                           1220/dnsmasq        </div><div class="line">udp        0      0 0.0.0.0:5353            0.0.0.0:*                           609/avahi-daemon: r </div><div class="line">udp6       0      0 ::1:53                  :::*                                16558/named         </div><div class="line">udp6       0      0 ::1:53                  :::*                                16152/named  </div><div class="line">[hniois@localhost ~]$</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;DNS(Domain Name System) 域名系统， 在TCP/IP 网络中有非常重要的地位，能提供域名与IP之间的解析服务。&lt;/p&gt;
&lt;p&gt;DNS是一个分布式数据库，命名系统采用层次的逻辑结构，如同一颗倒置的树，这个逻辑的树形结构称为域名空间，&lt;br&gt;由于DNS划分了域名空间，所以各机构可以使用自己的域名空间创建DNS信息。&lt;/p&gt;
&lt;p&gt;注：DNS域名空间中，树的最大深度不能超过127层，树中每个节点最长可以存储63个字符。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://peihaibin.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://peihaibin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux Samba服务器配置</title>
    <link href="https://peihaibin.github.io/2017/11/06/Linux-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-01/"/>
    <id>https://peihaibin.github.io/2017/11/06/Linux-学习笔记-01/</id>
    <published>2017-11-06T07:10:00.000Z</published>
    <updated>2017-11-09T04:39:08.531Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>Samba 最先在Linxu和windows两个平台之间架起了一座桥梁，正是由于Samba的出现，<br>我们可以在Linux和windows之间互相通信，比如拷贝文件、实现不同操作系统之间的资源共享等等，<br>我们可以将其架设成功能非常强大的文件服务器，也可以将其架设成打印服务器提供本地和远程联机打印。</p><a id="more"></a><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><font color="#ff00ff">文件和打印机共享</font>：文件和打印机共享是Samba的主要功能，SMB进程实现资源共享，<br>将文件和打印机发布到网络中，以供用户访问。<br><font color="#ff00ff">身份验证和权限设置</font>：smbd服务支持user mode和domain mode等身份验证和权限设置模式，<br>通过加密方式可以保护共享的文件和打印机。<br>端口号：<font color="#ff0000"> 139 和 445</font><p>在早期，SMB运行于NBT协议（NetBIOS over TCP/IP)上，使用UDP协议的137、138和TCP协议的139端口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">netbios-ns      137/tcp                         <span class="comment"># NETBIOS Name Service</span></div><div class="line">netbios-ns      137/udp</div><div class="line">netbios-dgm     138/tcp                         <span class="comment"># NETBIOS Datagram Service</span></div><div class="line">netbios-dgm     138/udp</div><div class="line">netbios-ssn     139/tcp                         <span class="comment"># NETBIOS session service</span></div><div class="line">netbios-ssn     139/udp</div></pre></td></tr></table></figure></p><p>NETBIOS 协议<br>NetBIOS 是Network Basic Input/Output System 简称，网络基本输入/输出系统协议，是由IBM公司开发的。<br>主要作用是：通过NetBIOS协议获取计算机名，然后把计算机名解析为对应的IP地址。</p><h4 id="安装Samba"><a href="#安装Samba" class="headerlink" title="安装Samba"></a>安装Samba</h4><p>服务器端：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost ~]$ rpm -ivh /mnt/Packages/samba-4.6.2-8.el7.x86_64.rpm</div></pre></td></tr></table></figure></p><p>客户端：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost ~]$ rpm -ivh /mnt/Packages/samba-client-4.6.2-8.el7.x86_64.rpm</div></pre></td></tr></table></figure></p><p>配置文件位置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost ~]$ vim /etc/samba/smb.conf</div></pre></td></tr></table></figure></p><p>服务器的启动和关闭<br>1:启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost ~]$ sudo systemctl start smb.service</div></pre></td></tr></table></figure></p><p>2:关闭<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost ~]$ sudo systemctl stop smb.service</div></pre></td></tr></table></figure></p><p>3:重启<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost ~]$ sudo systemctl restart smb.service</div></pre></td></tr></table></figure></p><p>4:服务当前状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost ~]$ systemctl status smb.service </div><div class="line">● smb.service - Samba SMB Daemon</div><div class="line">   Loaded: loaded (/usr/lib/systemd/system/smb.service; disabled; vendor preset: disabled)</div><div class="line">   Active: active (running) since 一 2017-10-23 11:46:26 CST; 18s ago</div><div class="line"> Main PID: 111351 (smbd)</div><div class="line">   Status: <span class="string">"smbd: ready to serve connections..."</span></div><div class="line">   CGroup: /system.slice/smb.service</div><div class="line">           ├─111351 /usr/sbin/smbd</div><div class="line">           ├─111352 /usr/sbin/smbd</div><div class="line">           ├─111353 /usr/sbin/smbd</div><div class="line">           └─111354 /usr/sbin/smbd</div><div class="line"></div><div class="line">10月 23 11:46:26 localhost.localdomain systemd[1]: Starting Samba SMB Daemon...</div><div class="line">10月 23 11:46:26 localhost.localdomain systemd[1]: smb.service: Supervising proces....</div><div class="line">10月 23 11:46:26 localhost.localdomain smbd[111351]: [2017/10/23 11:46:26.792163, ...)</div><div class="line">10月 23 11:46:26 localhost.localdomain smbd[111351]:   STATUS=daemon <span class="string">'smbd'</span> finish...s</div><div class="line">10月 23 11:46:26 localhost.localdomain systemd[1]: Started Samba SMB Daemon.</div><div class="line">Hint: Some lines were ellipsized, use -l to show <span class="keyword">in</span> full.</div></pre></td></tr></table></figure></p><p>如果当前服务正在运行，如何不重启服务，加载新的配置文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost ~]$ systemctl reload smb.service</div></pre></td></tr></table></figure></p><p>开机启动服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost ~]$ systemctl <span class="built_in">enable</span> smb.service</div></pre></td></tr></table></figure></p><p>查看端口号：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost ~]$ sudo netstat -anutp|grep smb</div><div class="line">[sudo] hniois 的密码：</div><div class="line">tcp        0      0 0.0.0.0:139             0.0.0.0:*               LISTEN      111351smbd         </div><div class="line">tcp        0      0 0.0.0.0:445             0.0.0.0:*               LISTEN      111351smbd         </div><div class="line">tcp6       0      0 :::139                  :::*                    LISTEN      111351smbd         </div><div class="line">tcp6       0      0 :::445                  :::*                    LISTEN      111351smbd         </div><div class="line">[hniois@localhost ~]$</div></pre></td></tr></table></figure></p><h4 id="访问Samba服务"><a href="#访问Samba服务" class="headerlink" title="访问Samba服务"></a>访问Samba服务</h4><p>windows:<br>通过 \IP地址 来访问</p><p>Linux：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost ~]$ smbclient -L IP地址</div></pre></td></tr></table></figure></p><h4 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h4><p>基本的Samba服务器搭建流程主要分为四个步骤：<br>[1]、编辑主配置文件smb.conf,制定需要共享的目录，并为共享目录设置共享权限。<br>[2]、在smb.conf 文件中指定日志文件名称和存放路径。<br>[3]、设置共享目录的本地系统权限及samba共享权限。<br>[4]、重新加载配置文件或重新启动smb服务，使配置生效。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;Samba 最先在Linxu和windows两个平台之间架起了一座桥梁，正是由于Samba的出现，&lt;br&gt;我们可以在Linux和windows之间互相通信，比如拷贝文件、实现不同操作系统之间的资源共享等等，&lt;br&gt;我们可以将其架设成功能非常强大的文件服务器，也可以将其架设成打印服务器提供本地和远程联机打印。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://peihaibin.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://peihaibin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>汇编命令</title>
    <link href="https://peihaibin.github.io/2017/10/30/%E5%AE%89%E5%85%A8-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-01/"/>
    <id>https://peihaibin.github.io/2017/10/30/安全-学习笔记-01/</id>
    <published>2017-10-30T08:10:00.000Z</published>
    <updated>2017-11-06T02:39:37.438Z</updated>
    
    <content type="html"><![CDATA[<p><font color="#ff0000">JE</font>   ;等于则跳转</p><p><font color="#ff0000">JNE</font> ;不等于则跳转</p><p><font color="#ff0000">JZ</font>   ;为 0 则跳转</p><p><font color="#ff0000">JNZ</font> ;不为 0 则跳转</p><a id="more"></a><p><font color="#ff0000">JS</font>   ;为负则跳转</p><p><font color="#ff0000">JNS</font> ;不为负则跳转</p><p><font color="#ff0000">JC</font>   ;进位则跳转</p><p><font color="#ff0000">JNC</font> ;不进位则跳转</p><p><font color="#ff0000">JO</font>   ;溢出则跳转</p><p><font color="#ff0000">JNO</font> ;不溢出则跳转</p><p><font color="#ff0000">JA</font>   ;无符号大于则跳转</p><p><font color="#ff0000">JNA</font> ;无符号不大于则跳转</p><p><font color="#ff0000">JAE</font> ;无符号大于等于则跳转</p><p><font color="#ff0000">JNAE</font> ;无符号不大于等于则跳转</p><p><font color="#ff0000">JG</font>   ;有符号大于则跳转</p><p><font color="#ff0000">JNG</font> ;有符号不大于则跳转</p><p><font color="#ff0000">JGE</font> ;有符号大于等于则跳转</p><p><font color="#ff0000">JNGE</font> ;有符号不大于等于则跳转</p><p><font color="#ff0000">JB</font>   ;无符号小于则跳转</p><p><font color="#ff0000">JNB</font> ;无符号不小于则跳转</p><p><font color="#ff0000">JBE</font> ;无符号小于等于则跳转</p><p><font color="#ff0000">JNBE</font> ;无符号不小于等于则跳转</p><p><font color="#ff0000">JL</font>   ;有符号小于则跳转</p><p><font color="#ff0000">JNL</font> ;有符号不小于则跳转</p><p><font color="#ff0000">JLE</font> ;有符号小于等于则跳转</p><p><font color="#ff0000">JNLE</font> ;有符号不小于等于则跳转</p><p><font color="#ff0000">JP</font>   ;奇偶位置位则跳转</p><p><font color="#ff0000">JNP</font> ;奇偶位清除则跳转</p><p><font color="#ff0000">JPE</font> ;奇偶位相等则跳转</p><p><font color="#ff0000">JPO</font> ;奇偶位不等则跳转</p><p><font color="#ff0000">JMP</font> ;无条件跳转</p><p>mov指令的几种形式：<br>mov  寄存器、  数据<br>mov ax,123<br>mov  寄存器、  寄存器<br>mov bx,ax<br>mov  寄存器、  内存单元<br>mov ax,[0]<br>mov  内存单元、寄存器<br>mov [0],ax<br>mov  段寄存器、寄存器<br>mov ds,ax<br>add和sub指令和mov一样，都有2个操作对象。<br>sub和add类似，不过是相减，<br>sub ax,10    给ax减10，之后的结果赋值给ax<br>sub ax,bx    语意是ax = bx - ax<br>sub ax,[0]   将偏移地址为0的内存单元 - ax 再赋值给ax</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font color=&quot;#ff0000&quot;&gt;JE&lt;/font&gt;   ;等于则跳转&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;#ff0000&quot;&gt;JNE&lt;/font&gt; ;不等于则跳转&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;#ff0000&quot;&gt;JZ&lt;/font&gt;   ;为 0 则跳转&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;#ff0000&quot;&gt;JNZ&lt;/font&gt; ;不为 0 则跳转&lt;/p&gt;
    
    </summary>
    
      <category term="Security" scheme="https://peihaibin.github.io/categories/Security/"/>
    
    
      <category term="安全" scheme="https://peihaibin.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>字典中的键映射多个值</title>
    <link href="https://peihaibin.github.io/2017/10/23/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-13/"/>
    <id>https://peihaibin.github.io/2017/10/23/Python-学习笔记-13/</id>
    <published>2017-10-23T02:10:00.000Z</published>
    <updated>2017-10-23T02:40:43.669Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>怎样实现一个键对应多个值的字典（也叫 multidict）<br><a id="more"></a></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>一个字典就是一个键对应一个单值的映射。<br>如果你想要一个键映射多个值，那么你就需要将这多个值放到另外的容器中， 比如列表或者集合里面。比如，你可以像下面这样构造这样的字典：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;</div><div class="line">    <span class="string">'a'</span> : [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</div><div class="line">    <span class="string">'b'</span> : [<span class="number">4</span>, <span class="number">5</span>]</div><div class="line">&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>e = &#123;</div><div class="line">    <span class="string">'a'</span> : &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</div><div class="line">    <span class="string">'b'</span> : &#123;<span class="number">4</span>, <span class="number">5</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>选择使用列表还是集合取决于你的实际需求。<br>如果你想保持元素的插入顺序就应该使用列表，<br>如果想去掉重复元素就使用集合（并且不关心元素的顺序问题）。</p><p>你可以很方便的使用 collections 模块中的 defaultdict 来构造这样的字典。<br>defaultdict 的一个特征是它会自动初始化每个 key 刚开始对应的值，所以你只需要关注添加元素操作了。比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = defaultdict(list)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'a'</span>].append(<span class="number">1</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'a'</span>].append(<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'b'</span>].append(<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">defaultdict(&lt;class 'list'&gt;, &#123;'a': [1, 2], 'b': [4]&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>e[<span class="string">'a'</span>].add(<span class="number">1</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>e[<span class="string">'a'</span>].add(<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>e[<span class="string">'b'</span>].add(<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>e</div><div class="line">defaultdict(&lt;class 'set'&gt;, &#123;'a': &#123;1, 2&#125;, 'b': &#123;4&#125;&#125;)</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure><p>需要注意的是，defaultdict 会自动为将要访问的键（就算目前字典中并不存在这样的键）创建映射实体。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>e[<span class="string">'c'</span>]</div><div class="line">set()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>e</div><div class="line">defaultdict(&lt;class 'set'&gt;, &#123;'a': &#123;1, 2&#125;, 'b': &#123;4&#125;, 'c': set()&#125;)</div></pre></td></tr></table></figure></p><p>如果你并不需要这样的特性，你可以在一个普通的字典上使用 setdefault() 方法来代替。比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>e = &#123;&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>e.setdefault(<span class="string">'a'</span>,[]).append(<span class="number">1</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>e.setdefault(<span class="string">'a'</span>,[]).append(<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>e.setdefault(<span class="string">'b'</span>,[]).append(<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>e</div><div class="line">&#123;<span class="string">'a'</span>: [<span class="number">1</span>, <span class="number">2</span>], <span class="string">'b'</span>: [<span class="number">4</span>]&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>e[<span class="string">'c'</span>]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;pyshell#30&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    e[<span class="string">'c'</span>]</div><div class="line">KeyError: <span class="string">'c'</span></div></pre></td></tr></table></figure></p><p>但是很多人觉得setdefault()用起来有点别扭。<br>因为每次调用都得创建一个新的初始值的实例（例子程序中的空列表 [] ）。</p><h4 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h4><p>一般来讲，创建一个多值映射字典是很简单的。但是，如果你选择自己实现的话，那么对于值的初始化可能会有点麻烦， 你可能会像下面这样来实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">d = &#123;&#125;</div><div class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> pairs:</div><div class="line">    <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> d:</div><div class="line">        d[key] = []</div><div class="line">    d[key].append(value)</div></pre></td></tr></table></figure><p>如果使用 defaultdict 的话代码就更加简洁了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">d = defaultdict(list)</div><div class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> pairs:</div><div class="line">    d[key].append(value)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;怎样实现一个键对应多个值的字典（也叫 multidict）&lt;br&gt;
    
    </summary>
    
      <category term="Study" scheme="https://peihaibin.github.io/categories/Study/"/>
    
    
      <category term="python" scheme="https://peihaibin.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>实现一个优先级队列</title>
    <link href="https://peihaibin.github.io/2017/10/20/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-12/"/>
    <id>https://peihaibin.github.io/2017/10/20/Python-学习笔记-12/</id>
    <published>2017-10-20T01:16:00.000Z</published>
    <updated>2017-10-23T02:05:53.680Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>怎样实现一个按优先级排序的队列？ 并且在这个队列上面每次 pop 操作总是返回优先级最高的那个元素<br><a id="more"></a></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>下面的类利用 heapq 模块实现了一个简单的优先级队列：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> heapq</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self._queue = []</div><div class="line">        self._index = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, item, priority)</span>:</span></div><div class="line">        heapq.heappush(self._queue, (-priority, self._index, item))</div><div class="line">        self._index += <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> heapq.heappop(self._queue)[<span class="number">-1</span>]</div></pre></td></tr></table></figure></p><p>heapq.heappush(heap, item)<br>将值item推到heap上，保持堆不变。</p><p>heapq.heappop(heap)<br>从heap中弹出并返回最小的项，保持堆不变。<br>如果堆为空，则会引发IndexError。<br>要访问最小的项而不需要弹出它，请使用heap [0]。<br>注：这对于在正在跟踪的主记录旁边分配比较值（例如任务优先级）很有用：</p><p>下面是它的使用方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Item</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.name = name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q = PriorityQueue()</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.push(Item(<span class="string">'foo'</span>), <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.push(Item(<span class="string">'bar'</span>), <span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.push(Item(<span class="string">'spam'</span>), <span class="number">4</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.push(Item(<span class="string">'grok'</span>), <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.pop()</div><div class="line">Item(<span class="string">'bar'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.pop()</div><div class="line">Item(<span class="string">'spam'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.pop()</div><div class="line">Item(<span class="string">'foo'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.pop()</div><div class="line">Item(<span class="string">'grok'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.pop()</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;pyshell#16&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    q.pop()</div><div class="line">  File <span class="string">"&lt;pyshell#4&gt;"</span>, line <span class="number">11</span>, <span class="keyword">in</span> pop</div><div class="line">    <span class="keyword">return</span> heapq.heappop(self._queue)[<span class="number">-1</span>]</div><div class="line">IndexError: index out of range</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure><p>仔细观察可以发现，第一个 pop() 操作返回优先级最高的元素。 另外注意到如果两个有着相同优先级的元素（ foo 和 grok ），pop 操作按照它们被插入到队列的顺序返回的。</p><h4 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h4><p>函数 heapq.heappush() 和 heapq.heappop() 分别在队列 _queue 上插入和删除第一个元素， 并且队列 _queue 保证第一个元素拥有最高优先级。 heappop() 函数总是返回”最小的”的元素，这就是保证队列pop操作返回正确元素的关键。<br>另外，由于push和pop操作时间复杂度为 O(log N)，其中N是堆的大小，因此就算是N很大的时候它们运行速度也依旧很快。</p><p>在上面代码中，队列包含了一个 (-priority, index, item) 的元组。 优先级为负数的目的是使得元素按照优先级从高到低排序。<br>这个跟普通的按优先级从低到高排序的堆排序恰巧相反。</p><p>index 变量的作用是保证同等优先级元素的正确排序。<br>通过保存一个不断增加的 index 下标变量，可以确保元素按照它们插入的顺序排序。<br>而且， index 变量也在相同优先级元素比较的时候起到重要作用。</p><p>为了阐明这些，先假定 Item 实例是不支持排序的：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = Item(<span class="string">'foo'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = Item(<span class="string">'bar'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a &lt; b</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;pyshell#27&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    a &lt; b</div><div class="line">TypeError: <span class="string">'&lt;'</span> <span class="keyword">not</span> supported between instances of <span class="string">'Item'</span> <span class="keyword">and</span> <span class="string">'Item'</span></div></pre></td></tr></table></figure></p><p>如果你使用元组 (priority, item) ，只要两个元素的优先级不同就能比较。 但是如果两个元素优先级一样的话，那么比较操作就会跟之前一样出错：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="number">1</span>,Item(<span class="string">'foo'</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = (<span class="number">5</span>,Item(<span class="string">'bar'</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a &lt; b</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = (<span class="number">1</span>, Item(<span class="string">'grok'</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a &lt; c</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;pyshell#32&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    a &lt; c</div><div class="line">TypeError: <span class="string">'&lt;'</span> <span class="keyword">not</span> supported between instances of <span class="string">'Item'</span> <span class="keyword">and</span> <span class="string">'Item'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p><p>通过引入另外的 index 变量组成三元组 (priority, index, item) ，就能很好的避免上面的错误， 因为不可能有两个元素有相同的 index 值。<br>Python 在做元组比较时候，如果前面的比较已经可以确定结果了， 后面的比较操作就不会发生了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="number">1</span>, <span class="number">0</span>, Item(<span class="string">'foo'</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = (<span class="number">5</span>, <span class="number">1</span>, Item(<span class="string">'bar'</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = (<span class="number">1</span>, <span class="number">2</span>, Item(<span class="string">'grok'</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a &lt; b</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a &lt; c</div><div class="line"><span class="keyword">True</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;怎样实现一个按优先级排序的队列？ 并且在这个队列上面每次 pop 操作总是返回优先级最高的那个元素&lt;br&gt;
    
    </summary>
    
      <category term="Study" scheme="https://peihaibin.github.io/categories/Study/"/>
    
    
      <category term="python" scheme="https://peihaibin.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>查找最大或最小的 N 个元素</title>
    <link href="https://peihaibin.github.io/2017/10/20/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-11/"/>
    <id>https://peihaibin.github.io/2017/10/20/Python-学习笔记-11/</id>
    <published>2017-10-20T00:55:00.000Z</published>
    <updated>2017-10-20T01:11:33.491Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>怎样从一个集合中获得最大或者最小的 N 个元素列表？<br><a id="more"></a></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>heapq 模块有两个函数：nlargest() 和 nsmallest() 可以完美解决这个问题。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> heapq</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>nums = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">93</span>, <span class="number">35</span>, <span class="number">-24</span>, <span class="number">-3</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">48</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(heapq.nlargest(<span class="number">3</span>,nums))</div><div class="line">[<span class="number">93</span>, <span class="number">48</span>, <span class="number">35</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(heapq.nsmallest(<span class="number">3</span>,nums))</div><div class="line">[<span class="number">-24</span>, <span class="number">-3</span>, <span class="number">1</span>]</div></pre></td></tr></table></figure></p><p>两个函数都能接受一个关键字参数，用于更复杂的数据结构中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>portfolio = [</div><div class="line">    &#123;<span class="string">'name'</span>: <span class="string">'IBM'</span>, <span class="string">'shares'</span>: <span class="number">100</span>, <span class="string">'price'</span>: <span class="number">91.1</span>&#125;,</div><div class="line">    &#123;<span class="string">'name'</span>: <span class="string">'AAPL'</span>, <span class="string">'shares'</span>: <span class="number">50</span>, <span class="string">'price'</span>: <span class="number">543.22</span>&#125;,</div><div class="line">    &#123;<span class="string">'name'</span>: <span class="string">'FB'</span>, <span class="string">'shares'</span>: <span class="number">200</span>, <span class="string">'price'</span>: <span class="number">21.09</span>&#125;,</div><div class="line">    &#123;<span class="string">'name'</span>: <span class="string">'HPQ'</span>, <span class="string">'shares'</span>: <span class="number">35</span>, <span class="string">'price'</span>: <span class="number">31.75</span>&#125;,</div><div class="line">    &#123;<span class="string">'name'</span>: <span class="string">'YHOO'</span>, <span class="string">'shares'</span>: <span class="number">45</span>, <span class="string">'price'</span>: <span class="number">16.35</span>&#125;,</div><div class="line">    &#123;<span class="string">'name'</span>: <span class="string">'ACME'</span>, <span class="string">'shares'</span>: <span class="number">75</span>, <span class="string">'price'</span>: <span class="number">115.65</span>&#125;</div><div class="line">]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cheap = heapq.nsmallest(<span class="number">3</span>, portfolio, key = <span class="keyword">lambda</span> s: s[<span class="string">'price'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (cheap)</div><div class="line">[&#123;<span class="string">'name'</span>: <span class="string">'YHOO'</span>, <span class="string">'shares'</span>: <span class="number">45</span>, <span class="string">'price'</span>: <span class="number">16.35</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'FB'</span>, <span class="string">'shares'</span>: <span class="number">200</span>, <span class="string">'price'</span>: <span class="number">21.09</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'HPQ'</span>, <span class="string">'shares'</span>: <span class="number">35</span>, <span class="string">'price'</span>: <span class="number">31.75</span>&#125;]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>expensive = heapq.nlargest(<span class="number">3</span>, portfolio, key = <span class="keyword">lambda</span> s: s[<span class="string">'price'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(expensive)</div><div class="line">[&#123;<span class="string">'name'</span>: <span class="string">'AAPL'</span>, <span class="string">'shares'</span>: <span class="number">50</span>, <span class="string">'price'</span>: <span class="number">543.22</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'ACME'</span>, <span class="string">'shares'</span>: <span class="number">75</span>, <span class="string">'price'</span>: <span class="number">115.65</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'IBM'</span>, <span class="string">'shares'</span>: <span class="number">100</span>, <span class="string">'price'</span>: <span class="number">91.1</span>&#125;]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure><p>上面代码在对每个元素进行对比的时候，会以 price 的值进行比较。</p><h4 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h4><p>如果你想在一个集合中查找最小或最大的 N 个元素，并且 N 小于集合元素数量，那么这些函数提供了很好的性能。 因为在底层实现里面，首先会先将集合数据进行堆排序后放入一个列表中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> heapq</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>nums = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">93</span>, <span class="number">35</span>, <span class="number">-24</span>, <span class="number">-3</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">48</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heap = list(nums)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.heapify(heap)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heap</div><div class="line">[<span class="number">-24</span>, <span class="number">-3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">35</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">93</span>, <span class="number">48</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p><p>堆数据结构最重要的特征是 heap[0] 永远是最小的元素。并且剩余的元素可以很容易的通过调用 heapq.heappop() 方法得到， 该方法会先将第一个元素弹出来，然后用下一个最小的元素来取代被弹出元素（这种操作时间复杂度仅仅是 O(log N)，N 是堆大小）。 比如，如果想要查找最小的 3 个元素，你可以这样做：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.heappop(heap)</div><div class="line"><span class="number">-24</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heap</div><div class="line">[<span class="number">-3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">35</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">48</span>, <span class="number">6</span>, <span class="number">93</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.heappop(heap)</div><div class="line"><span class="number">-3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heap</div><div class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">35</span>, <span class="number">93</span>, <span class="number">10</span>, <span class="number">48</span>, <span class="number">6</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.heappop(heap)</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heap</div><div class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">35</span>, <span class="number">93</span>, <span class="number">10</span>, <span class="number">48</span>]</div></pre></td></tr></table></figure></p><p>当要查找的元素个数相对比较小的时候，函数 nlargest() 和 nsmallest() 是很合适的。 如果你仅仅想查找唯一的最小或最大（N=1）的元素的话，那么使用 min() 和 max() 函数会更快些。 </p><p>类似的，如果 N 的大小和集合大小接近的时候，通常先排序这个集合然后再使用切片操作会更快点（ sorted(items)[:N] 或者是 sorted(items)[-N:] ）。 </p><p>需要在正确场合使用函数 nlargest() 和 nsmallest() 才能发挥它们的优势 （如果 N 快接近集合大小了，那么使用排序操作会更好些）。</p><p>尽管你没有必要一定使用这里的方法，但是堆数据结构的实现是一个很有趣并且值得你深入学习的东西。 基本上只要是数据结构和算法书籍里面都会有提及到。heapq块的官方文档里面也详细的介绍了堆数据结构底层的实现细节。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;怎样从一个集合中获得最大或者最小的 N 个元素列表？&lt;br&gt;
    
    </summary>
    
      <category term="Study" scheme="https://peihaibin.github.io/categories/Study/"/>
    
    
      <category term="python" scheme="https://peihaibin.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>解压可迭代对象赋值给多个变量</title>
    <link href="https://peihaibin.github.io/2017/10/19/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-10/"/>
    <id>https://peihaibin.github.io/2017/10/19/Python-学习笔记-10/</id>
    <published>2017-10-19T09:12:03.000Z</published>
    <updated>2017-10-19T09:32:55.497Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>如果一个可迭代对象的元素个数超过变量个数时，会抛出一个 ValueError。那么怎样才能从这个可迭代对象中解压出 N 个元素出来？<br><a id="more"></a></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>Python 的星号表达式可以用来解决这个问题。比如，你在学习一门课程，在学期末的时候， 你想统计下家庭作业的平均成绩，但是排除掉第一个和最后一个分数。如果只有四个分数，你可能就直接去简单的手动赋值， 但如果有 24 个呢？这时候星号表达式就派上用场了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">drop_first_last</span><span class="params">(grades)</span>:</span></div><div class="line">    first, *middle, last = grades</div><div class="line">    <span class="keyword">return</span> avg(middle)</div></pre></td></tr></table></figure></p><p>另外一种情况，假设你现在有一些用户的记录列表，每条记录包含一个名字、邮件，接着就是不确定数量的电话号码。 你可以像下面这样分解这些记录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>record = (<span class="string">'Dave'</span>, <span class="string">'dave@example.com'</span>, <span class="string">'773-555-1212'</span>, <span class="string">'847-555-1212'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name, email, *phone_numbers = record</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name</div><div class="line"><span class="string">'Dave'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>email</div><div class="line"><span class="string">'dave@example.com'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>phone_numbers</div><div class="line">[<span class="string">'773-555-1212'</span>, <span class="string">'847-555-1212'</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure><p>值得注意的是上面解压出的 phone_numbers 变量永远都是列表类型，不管解压的电话号码数量是多少（包括 0 个）。 所以，任何使用到 phone_numbers 变量的代码就不需要做多余的类型检查去确认它是否是列表类型了。</p><p>星号表达式也能用在列表的开始部分。比如，你有一个公司前 8 个月销售数据的序列， 但是你想看下最近一个月数据和前面 7 个月的平均值的对比。你可以这样做：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*trailing_qtrs, current_qtr = sales_record</div><div class="line">trailing_avg = sum(trailing_qtrs) / len(trailing_qtrs)</div><div class="line"><span class="keyword">return</span> avg_comparison(trailing_avg, current_qtr)</div></pre></td></tr></table></figure></p><p>下面是在 Python 解释器中执行的结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>*trailing, current = [<span class="number">10</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>trailing</div><div class="line">[<span class="number">10</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">10</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>current</div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>trailing_avg = sum(trailing) /len(trailing)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>trailing_avg</div><div class="line"><span class="number">7.142857142857143</span></div></pre></td></tr></table></figure></p><h4 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h4><p>扩展的迭代解压语法是专门为解压不确定个数或任意个数元素的可迭代对象而设计的。 通常，这些可迭代对象的元素结构有确定的规则（比如第 1 个元素后面都是电话号码）， 星号表达式让开发人员可以很容易的利用这些规则来解压出元素来。 而不是通过一些比较复杂的手段去获取这些关联的元素值。</p><p>值得注意的是，星号表达式在迭代元素为可变长元组的序列时是很有用的。<br>比如，下面是一个带有标签的元组序列：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>records = [</div><div class="line">    (<span class="string">'foo'</span>, <span class="number">1</span>, <span class="number">2</span>),</div><div class="line">    (<span class="string">'bar'</span>, <span class="string">'hello'</span>),</div><div class="line">    (<span class="string">'foo'</span>, <span class="number">3</span>, <span class="number">4</span>),</div><div class="line">    ]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">do_foo</span><span class="params">(x, y)</span>:</span></div><div class="line">    print(<span class="string">'foo'</span>, x, y)</div><div class="line"></div><div class="line">    </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">do_bar</span><span class="params">(s)</span>:</span></div><div class="line">    print(<span class="string">'bar'</span>, s)</div><div class="line"></div><div class="line">    </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> tag, *args <span class="keyword">in</span> records:</div><div class="line">    <span class="keyword">if</span> tag == <span class="string">'foo'</span>:</div><div class="line">        do_foo(*args)</div><div class="line">    <span class="keyword">elif</span> tag == <span class="string">'bar'</span>:</div><div class="line">        do_bar(*args)</div><div class="line"></div><div class="line">        </div><div class="line">foo <span class="number">1</span> <span class="number">2</span></div><div class="line">bar hello</div><div class="line">foo <span class="number">3</span> <span class="number">4</span></div></pre></td></tr></table></figure></p><p>星号解压语法在字符串操作的时候也会很有用，比如字符串的分割。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>line = <span class="string">'nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>uname, *fields, homedir, sh = line.split(<span class="string">':'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>uname</div><div class="line"><span class="string">'nobody'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>homedir</div><div class="line"><span class="string">'/var/empty'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sh</div><div class="line"><span class="string">'/usr/bin/false'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p><p>有时候，你想解压一些元素后丢弃它们，你不能简单就使用 * ， 但是你可以使用一个普通的废弃名称，比如 _ 或者 ign （ignore）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>record = (<span class="string">'ACME'</span>, <span class="number">50</span>, <span class="number">123.45</span>, (<span class="number">12</span>, <span class="number">18</span>, <span class="number">2012</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name, *_, (*_, year) = record</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name</div><div class="line"><span class="string">'ACME'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>year</div><div class="line"><span class="number">2012</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p><p>在很多函数式语言中，星号解压语法跟列表处理有许多相似之处。比如，如果你有一个列表， 你可以很容易的将它分割成前后两部分：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>items = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>head, *tail = items</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>head</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tail</div><div class="line">[<span class="number">10</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p><p>如果你够聪明的话，还能用这种分割语法去巧妙的实现递归算法。比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">sumb</span><span class="params">(items)</span>:</span></div><div class="line">    head, *tail = items</div><div class="line">    <span class="keyword">return</span> head + sum(tail) <span class="keyword">if</span> tail <span class="keyword">else</span> head</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sumb([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</div><div class="line"><span class="number">15</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sumb(range(<span class="number">1</span>,<span class="number">10</span>))</div><div class="line"><span class="number">45</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sumb(range(<span class="number">1</span>,<span class="number">9</span>))</div><div class="line"><span class="number">36</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;如果一个可迭代对象的元素个数超过变量个数时，会抛出一个 ValueError。那么怎样才能从这个可迭代对象中解压出 N 个元素出来？&lt;br&gt;
    
    </summary>
    
      <category term="Study" scheme="https://peihaibin.github.io/categories/Study/"/>
    
    
      <category term="python" scheme="https://peihaibin.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>解压序列赋值给多个变量</title>
    <link href="https://peihaibin.github.io/2017/10/19/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-9/"/>
    <id>https://peihaibin.github.io/2017/10/19/Python-学习笔记-9/</id>
    <published>2017-10-19T08:58:03.000Z</published>
    <updated>2017-10-19T09:13:23.675Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>现在有一个包含 N 个元素的元组或者是序列，怎样将它里面的值解压后同时赋值给 N 个变量？<br><a id="more"></a></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>任何的序列（或者是可迭代对象）可以通过一个简单的赋值语句解压并赋值给多个变量。 唯一的前提就是变量的数量必须跟序列元素的数量是一样的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = (<span class="number">4</span>, <span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x, y = p</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x</div><div class="line"><span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y</div><div class="line"><span class="number">5</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data = [ <span class="string">'ACME'</span>, <span class="number">50</span>, <span class="number">91.1</span>, (<span class="number">2012</span>, <span class="number">12</span>, <span class="number">21</span>) ]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name, shares, price, date = data</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name</div><div class="line"><span class="string">'ACME'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>date</div><div class="line">(<span class="number">2012</span>, <span class="number">12</span>, <span class="number">21</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name, shares, price, (year, mon, day) = data</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name</div><div class="line"><span class="string">'ACME'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>year</div><div class="line"><span class="number">2012</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mon</div><div class="line"><span class="number">12</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>day</div><div class="line"><span class="number">21</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p><p>如果变量个数和序列元素的个数不匹配，会产生一个异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = (<span class="number">4</span>, <span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x, y, z = p</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;pyshell#19&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    x, y, z = p</div><div class="line">ValueError: <span class="keyword">not</span> enough values to unpack (expected <span class="number">3</span>, got <span class="number">2</span>)</div></pre></td></tr></table></figure><h4 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h4><p>实际上，这种解压赋值可以用在任何可迭代对象上面，而不仅仅是列表或者元组。 包括字符串，文件对象，迭代器和生成器。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'Hello'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c, d, e = s</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line"><span class="string">'H'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line"><span class="string">'e'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>e</div><div class="line"><span class="string">'o'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p><p>有时候，你可能只想解压一部分，丢弃其他的值。对于这种情况 Python 并没有提供特殊的语法。 但是你可以使用任意变量名去占位，到时候丢掉这些变量就行了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>data = [ <span class="string">'ACME'</span>, <span class="number">50</span>, <span class="number">91.1</span>, (<span class="number">2012</span>, <span class="number">12</span>, <span class="number">21</span>) ]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>_, shares, price, _ = data</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>shares</div><div class="line"><span class="number">50</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>price</div><div class="line"><span class="number">91.1</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p><p>你必须保证你选用的那些占位变量名在其他地方没被使用到。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;现在有一个包含 N 个元素的元组或者是序列，怎样将它里面的值解压后同时赋值给 N 个变量？&lt;br&gt;
    
    </summary>
    
      <category term="Study" scheme="https://peihaibin.github.io/categories/Study/"/>
    
    
      <category term="python" scheme="https://peihaibin.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Linux Shell中的变量-预定义变量</title>
    <link href="https://peihaibin.github.io/2017/10/12/Linux%20Shell%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F-%E9%A2%84%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F/"/>
    <id>https://peihaibin.github.io/2017/10/12/Linux Shell中的变量-预定义变量/</id>
    <published>2017-10-12T01:37:03.000Z</published>
    <updated>2017-10-12T01:38:55.386Z</updated>
    
    <content type="html"><![CDATA[<p>Linux Shell下的变量按其使用目的可分为3种类型：</p><p>环境变量：用于保存操作系统运行时使用的环境参数<br>位置变量：Bash将传递给脚本的参数保存在位置变量中，以便于在脚本中引用这些参数<br>预定义变量：由系统保留和维护的一组特殊的变量，这些变量通常用于保存程序运行状态等<br>自定义变量：由用户自行定义的变量，可用于用户编写的脚本，多个命令间的值传递等</p><a id="more"></a><p>系统预先定义的变量</p><p>系统预先定义的变量简称为预定义变量，是由系统预先定义的一组变量，这些变量通常用于保存与系统 / 命令等有关的信息。预定义变量由系统自动生成 / 维护，用户无需修改其值。</p><p>常见预定义变量：<br>$0：保存当前程序或脚本的名称<br>$*：保存传递给脚本或进程的所有参数<br>$$：当前进程给脚本的PID号<br>$!：后台运行的最后一个进程的PID号<br>$?：用于返回上一条命令是否成功执行。如果成功执行，将返回数字0，否则返回非零数字（通常情况下都返回数字1）。<br>$#：用于保存脚本的参数个数</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux Shell下的变量按其使用目的可分为3种类型：&lt;/p&gt;
&lt;p&gt;环境变量：用于保存操作系统运行时使用的环境参数&lt;br&gt;位置变量：Bash将传递给脚本的参数保存在位置变量中，以便于在脚本中引用这些参数&lt;br&gt;预定义变量：由系统保留和维护的一组特殊的变量，这些变量通常用于保存程序运行状态等&lt;br&gt;自定义变量：由用户自行定义的变量，可用于用户编写的脚本，多个命令间的值传递等&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://peihaibin.github.io/categories/Linux/"/>
    
    
      <category term="Shell" scheme="https://peihaibin.github.io/tags/Shell/"/>
    
      <category term="Linux" scheme="https://peihaibin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>XShell连接 Linux系统显示中文乱码解决</title>
    <link href="https://peihaibin.github.io/2017/10/10/XShell%E8%BF%9E%E6%8E%A5Linux%E7%B3%BB%E7%BB%9F%E6%98%BE%E7%A4%BA%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/"/>
    <id>https://peihaibin.github.io/2017/10/10/XShell连接Linux系统显示中文乱码解决/</id>
    <published>2017-10-10T02:32:03.000Z</published>
    <updated>2017-10-12T01:38:12.154Z</updated>
    
    <content type="html"><![CDATA[<p>XShell是一个强大的安全终端模拟软件，它支持SSH1， SSH2及 Microsoft Windows平台的Telnet NetSarang Xshell 4 Build 0120协议。使用Xshell可以快速方便的管理Linux主机。</p><p>我们在使用时，可能会遇到Linux下显示中文乱码的情况，以下为解决方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost ~]$ df -h</div><div class="line">?.欢绯荤?                 瀹归.  宸茬.  ?.. 宸茬.% ?.浇?</div><div class="line">/dev/mapper/centos-root   17G  3.9G   14G   23% /</div><div class="line">devtmpfs                 473M     0  473M    0% /dev</div><div class="line">tmpfs                    489M     0  489M    0% /dev/shm</div><div class="line">tmpfs                    489M   14M  475M    3% /run</div><div class="line">tmpfs                    489M     0  489M    0% /sys/fs/cgroup</div><div class="line">/dev/sda1               1014M  161M  854M   16% /boot</div></pre></td></tr></table></figure><a id="more"></a><p>查看语言包支持的语言类型，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost ~]$ <span class="built_in">echo</span> <span class="variable">$LANG</span></div><div class="line">zh_CN.UTF-8</div></pre></td></tr></table></figure><p>系统支持中文语言包，显示还为乱码，则应该是Xshell连接工具的问题。<br>打开终端服务，选择菜单—属性，</p><p>找到 ‘终端’的编码设置，选择UTF-8编码格式即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[hniois@localhost ~]$ df -h</div><div class="line">文件系统                 容量  已用  可用 已用% 挂载点</div><div class="line">/dev/mapper/centos-root   17G  3.9G   14G   23% /</div><div class="line">devtmpfs                 473M     0  473M    0% /dev</div><div class="line">tmpfs                    489M     0  489M    0% /dev/sh</div><div class="line">tmpfs                    489M   14M  475M    3% /run</div><div class="line">tmpfs                    489M     0  489M    0% /sys/fs</div><div class="line">/dev/sda1               1014M  161M  854M   16% /boot</div><div class="line">tmpfs                     98M   28K   98M    1% /run/us</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;XShell是一个强大的安全终端模拟软件，它支持SSH1， SSH2及 Microsoft Windows平台的Telnet NetSarang Xshell 4 Build 0120协议。使用Xshell可以快速方便的管理Linux主机。&lt;/p&gt;
&lt;p&gt;我们在使用时，可能会遇到Linux下显示中文乱码的情况，以下为解决方法。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hniois@localhost ~]$ df -h&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;?.欢绯荤?                 瀹归.  宸茬.  ?.. 宸茬.% ?.浇?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/dev/mapper/centos-root   17G  3.9G   14G   23% /&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;devtmpfs                 473M     0  473M    0% /dev&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tmpfs                    489M     0  489M    0% /dev/shm&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tmpfs                    489M   14M  475M    3% /run&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tmpfs                    489M     0  489M    0% /sys/fs/cgroup&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/dev/sda1               1014M  161M  854M   16% /boot&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://peihaibin.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://peihaibin.github.io/tags/Linux/"/>
    
      <category term="XShell" scheme="https://peihaibin.github.io/tags/XShell/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记 8</title>
    <link href="https://peihaibin.github.io/2017/09/29/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-8/"/>
    <id>https://peihaibin.github.io/2017/09/29/Python-学习笔记-8/</id>
    <published>2017-09-29T01:32:03.000Z</published>
    <updated>2017-09-29T02:43:49.700Z</updated>
    
    <content type="html"><![CDATA[<h4 id="python调试"><a href="#python调试" class="headerlink" title="python调试"></a>python调试</h4><p>程序能一次写完并正常运行的概率很小，基本不超过1%。总会有各种各样的bug需要修正。有的bug很简单，看看错误信息就知道，有的bug很复杂，我们需要知道出错时，哪些变量的值是正确的，哪些变量的值是错误的，因此，需要一整套调试程序的手段来修复bug。</p><h5 id="print"><a href="#print" class="headerlink" title="print"></a>print</h5><p>第一种方法简单直接粗暴有效，就是用<font color="#ff0000">print</font>把可能有问题的变量打印出来看看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># err.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></div><div class="line">    n = int(s)</div><div class="line">    <span class="keyword">print</span> <span class="string">'&gt;&gt;&gt; n = %d'</span> % n</div><div class="line">    <span class="keyword">return</span> <span class="number">10</span> / n</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    foo(<span class="string">'0'</span>)</div><div class="line"></div><div class="line">main()</div></pre></td></tr></table></figure><p>用<font color="#ff0000">print</font> 最大的坏处是将来还得删掉它，想想程序里到处都是<font color="#ff0000">print</font>，运行结果也会包含很多垃圾信息。所以，我们又有第二种方法。<br><a id="more"></a></p><h5 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h5><p>凡是用<font color="#ff0000">print</font>来辅助查看的地方，都可以用断言（<font color="#ff0000">assert</font>）来替代：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># err.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></div><div class="line">    n = int(s)</div><div class="line">    <span class="keyword">assert</span> n != <span class="number">0</span>, <span class="string">'n is zero!'</span></div><div class="line">    <span class="keyword">return</span> <span class="number">10</span> / n</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    foo(<span class="string">'0'</span>)</div></pre></td></tr></table></figure><font color="#ff0000">assert</font>的意思是，表达式<strong>n != 0</strong>应该是<strong>True</strong>，否则，后面的代码就会出错。<br><br>如果断言失败，<font color="#ff0000">assert</font>语句本身就会抛出<font color="#ff0000">AssertionError</font>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ python err.py</div><div class="line">Traceback (most recent call last):</div><div class="line">  ...</div><div class="line">AssertionError: n <span class="keyword">is</span> zero!</div></pre></td></tr></table></figure><br><br>程序中如果到处充斥着<font color="#ff0000">assert</font>，和print相比也好不到哪去。不过，启动Python解释器时可以用<font color="#ff0000">-O</font>参数来关闭<font color="#ff0000">assert</font><h5 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h5><p>把<font color="#ff0000">print</font>替换为<font color="#ff0000">logging</font>是第3种方式，和<font color="#ff0000">assert</font>比，<font color="#ff0000">logging</font>不会抛出错误，而且可以输出到文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># err.py</span></div><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line">s = <span class="string">'0'</span></div><div class="line">n = int(s)</div><div class="line">logging.info(<span class="string">'n = %d'</span> % n)</div><div class="line"><span class="keyword">print</span> <span class="number">10</span> / n</div></pre></td></tr></table></figure></p><p><font color="#ff0000">logging.info()</font>就可以输出一段文本。运行，发现除了<font color="#ff0000">ZeroDivisionError</font>，没有任何信息。怎么回事？</p><p>别急，在<font color="#ff0000">import logging</font>之后添加一行配置再试试：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line">logging.basicConfig(level=logging.INFO)</div></pre></td></tr></table></figure></p><p>看到输出了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">INFO:root:n = <span class="number">0</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"err.py"</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    <span class="keyword">print</span> <span class="number">10</span> / n</div><div class="line">ZeroDivisionError: integer division <span class="keyword">or</span> modulo by zero</div></pre></td></tr></table></figure></p><p>这就是<font color="#ff0000">logging</font>的好处，它允许你指定记录信息的级别，有<font color="#ff0000">debug，info，warning，error</font>等几个级别，当我们指定<font color="#ff0000">level=INFO</font>时，<font color="#ff0000">logging.debug</font>就不起作用了。同理，指定<font color="#ff0000">level=WARNING</font>后，<font color="#ff0000">debug</font>和<font color="#ff0000">info</font>就不起作用了。这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。</p><p><font color="#ff0000">logging</font>的另一个好处是通过简单的配置，一条语句可以同时输出到不同的地方，比如console和文件。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;python调试&quot;&gt;&lt;a href=&quot;#python调试&quot; class=&quot;headerlink&quot; title=&quot;python调试&quot;&gt;&lt;/a&gt;python调试&lt;/h4&gt;&lt;p&gt;程序能一次写完并正常运行的概率很小，基本不超过1%。总会有各种各样的bug需要修正。有的bug很简单，看看错误信息就知道，有的bug很复杂，我们需要知道出错时，哪些变量的值是正确的，哪些变量的值是错误的，因此，需要一整套调试程序的手段来修复bug。&lt;/p&gt;
&lt;h5 id=&quot;print&quot;&gt;&lt;a href=&quot;#print&quot; class=&quot;headerlink&quot; title=&quot;print&quot;&gt;&lt;/a&gt;print&lt;/h5&gt;&lt;p&gt;第一种方法简单直接粗暴有效，就是用&lt;font color=&quot;#ff0000&quot;&gt;print&lt;/font&gt;把可能有问题的变量打印出来看看：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# err.py&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    n = int(s)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;gt;&amp;gt;&amp;gt; n = %d&#39;&lt;/span&gt; % n&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; / n&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    foo(&lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;main()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用&lt;font color=&quot;#ff0000&quot;&gt;print&lt;/font&gt; 最大的坏处是将来还得删掉它，想想程序里到处都是&lt;font color=&quot;#ff0000&quot;&gt;print&lt;/font&gt;，运行结果也会包含很多垃圾信息。所以，我们又有第二种方法。&lt;br&gt;
    
    </summary>
    
      <category term="Study" scheme="https://peihaibin.github.io/categories/Study/"/>
    
    
      <category term="python" scheme="https://peihaibin.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记 7</title>
    <link href="https://peihaibin.github.io/2017/09/28/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-7/"/>
    <id>https://peihaibin.github.io/2017/09/28/Python-学习笔记-7/</id>
    <published>2017-09-28T07:23:03.000Z</published>
    <updated>2017-09-28T09:36:00.394Z</updated>
    
    <content type="html"><![CDATA[<h4 id="python输入"><a href="#python输入" class="headerlink" title="python输入"></a>python输入</h4><p>如果要让用户从电脑输入一些字符怎么办？Python提供了一个raw_input，可以让用户输入字符串，并存放到一个变量里。<br>当你输入name = raw_input()并按下回车后，Python交互式命令行就在等待你的输入了。这时，你可以输入任意字符，然后按回车后完成输入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>name = raw_input()</div><div class="line">Michael</div></pre></td></tr></table></figure><p>raw_input可以让你显示一个字符串来提示用户，于是我们把代码改成：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">name = raw_input(<span class="string">'please enter your name: '</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'hello,'</span>, name</div></pre></td></tr></table></figure></p><a id="more"></a><h4 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h4><p>捋一捋ASCII编码和Unicode编码的区别：ASCII编码是1个字节，而Unicode编码通常是2个字节。</p><p>字母A用ASCII编码是十进制的65，二进制的01000001；</p><p>字符0用ASCII编码是十进制的48，二进制的00110000，注意字符’0’和整数0是不同的；</p><p>汉字中已经超出了ASCII编码的范围，用Unicode编码是十进制的20013，二进制的01001110 00101101。</p><p>你可以猜测，如果把ASCII编码的A用Unicode编码，只需要在前面补0就可以，因此，A的Unicode编码是00000000 01000001。</p><p>新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。<br>但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。</p><p>所以，本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。<br>UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:left">ASCII</th><th style="text-align:left">Unicode</th><th style="text-align:left">UTF-8</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:left">01000001</td><td style="text-align:left">00000000 01000001</td><td style="text-align:left">01000001</td></tr><tr><td style="text-align:center">中</td><td style="text-align:left">x</td><td style="text-align:left">01001110 00101101</td><td style="text-align:left">11100100 10111000 10101101</td></tr></tbody></table><p>从上面的表格还可以发现，UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。</p><p>搞清楚了ASCII、Unicode和UTF-8的关系，我们就可以总结一下现在计算机系统通用的字符编码工作方式：</p><p>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。</p><p>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：<br><img src="/img/0.png" alt="字符编码工作方式" title="字符编码工作方式图"></p><p>浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器：<br><img src="/img/1.png" alt="网页工作方式" title="网页字符编码工作方式图"></p><h4 id="python中-iter"><a href="#python中-iter" class="headerlink" title="python中__iter__"></a>python中__iter__</h4><p>如果一个类想被用于<font color="#ff0000">for … in</font>循环，类似list或tuple那样，就必须实现一个<font color="#ff0000">__iter__()</font>方法，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的next()方法拿到循环的下一个值，直到遇到StopIteration错误时退出循环。</p><p>以斐波那契数列为例，写一个Fib类，可以作用于for循环：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.a, self.b = <span class="number">0</span>, <span class="number">1</span> <span class="comment"># 初始化两个计数器a，b</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self <span class="comment"># 实例本身就是迭代对象，故返回自己</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></div><div class="line">        self.a, self.b = self.b, self.a + self.b <span class="comment"># 计算下一个值</span></div><div class="line">        <span class="keyword">if</span> self.a &gt; <span class="number">100</span>: <span class="comment"># 退出循环的条件</span></div><div class="line">            <span class="keyword">raise</span> StopIteration();</div><div class="line">        <span class="keyword">return</span> self.a <span class="comment"># 返回下一个值</span></div></pre></td></tr></table></figure></p><h4 id="python中-getitem"><a href="#python中-getitem" class="headerlink" title="python中 __getitem__"></a>python中 __getitem__</h4><p>Fib实例虽然能作用于for循环，看起来和list有点像，但是，把它当成list来使用还是不行，比如，取第5个元素：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>Fib()[<span class="number">5</span>]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: <span class="string">'Fib'</span> object does <span class="keyword">not</span> support indexing</div></pre></td></tr></table></figure></p><p>要表现得像list那样按照下标取出元素，需要实现<font color="#ff0000">__getitem__()</font>方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, n)</span>:</span></div><div class="line">        a, b = <span class="number">1</span>, <span class="number">1</span></div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(n):</div><div class="line">            a, b = b, a + b</div><div class="line">        <span class="keyword">return</span> a</div></pre></td></tr></table></figure></p><p>现在，就可以按下标访问数列的任意一项了。<br>但是list有个神奇的切片方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">100</span>)[<span class="number">5</span>:<span class="number">10</span>]</div><div class="line">[<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</div></pre></td></tr></table></figure></p><p>对于Fib却报错。原因是<font color="#ff0000">__getitem__()</font>传入的参数可能是一个int，也可能是一个切片对象<font color="#ff0000">slice</font>，所以要做判断：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, n)</span>:</span></div><div class="line">        <span class="keyword">if</span> isinstance(n, int):</div><div class="line">            a, b = <span class="number">1</span>, <span class="number">1</span></div><div class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(n):</div><div class="line">                a, b = b, a + b</div><div class="line">            <span class="keyword">return</span> a</div><div class="line">        <span class="keyword">if</span> isinstance(n, slice):</div><div class="line">            start = n.start</div><div class="line">            stop = n.stop</div><div class="line">            a, b = <span class="number">1</span>, <span class="number">1</span></div><div class="line">            L = []</div><div class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(stop):</div><div class="line">                <span class="keyword">if</span> x &gt;= start:</div><div class="line">                    L.append(a)</div><div class="line">                a, b = b, a + b</div><div class="line">            <span class="keyword">return</span> L</div></pre></td></tr></table></figure></p><p>但是没有对step参数作处理：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f[:<span class="number">10</span>:<span class="number">2</span>]</div><div class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>]</div></pre></td></tr></table></figure></p><p>也没有对负数作处理，所以，要正确实现一个<font color="#ff0000">__getitem__()</font>还是有很多工作要做的。</p><p>此外，如果把对象看成<font color="#ff0000">dict，__getitem__()</font>的参数也可能是一个可以作key的object，例如str。</p><p>与之对应的是<font color="#ff0000">__setitem__()</font>方法，把对象视作list或dict来对集合赋值。最后，还有一个<font color="#ff0000"><strong>delitem</strong>()</font>方法，用于删除某个元素。</p><p>总之，通过上面的方法，我们自己定义的类表现得和Python自带的list、tuple、dict没什么区别，这完全归功于动态语言的“鸭子类型”，不需要强制继承某个接口。</p><h4 id="python中-getattr"><a href="#python中-getattr" class="headerlink" title="python中 __getattr__"></a>python中 __getattr__</h4><p>正常情况下，当我们调用类的方法或属性时，如果不存在，就会报错。比如定义<strong>Student</strong>类：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.name = <span class="string">'Michael'</span></div></pre></td></tr></table></figure></p><p>调用<strong>name</strong>属性，没问题，但是，调用不存在的<strong>score</strong>属性，就有问题了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> s.name</div><div class="line">Michael</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> s.score</div><div class="line">Traceback (most recent call last):</div><div class="line">  ...</div><div class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'score'</span></div></pre></td></tr></table></figure></p><p>错误信息很清楚地告诉我们，没有找到<strong>score</strong>这个attribute。</p><p>要避免这个错误，除了可以加上一个<strong>score</strong>属性外，Python还有另一个机制，那就是写一个<font color="#ff0000">__getattr__()</font>方法，动态返回一个属性。修改如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.name = <span class="string">'Michael'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span></div><div class="line">        <span class="keyword">if</span> attr==<span class="string">'score'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">99</span></div></pre></td></tr></table></figure></p><p>当调用不存在的属性时，比如<strong>score</strong>，Python解释器会试图调用<font color="#ff0000">__getattr__(self, ‘score’)</font>来尝试获得属性，这样，我们就有机会返回<strong>score</strong>的值。</p><p>注意，只有在没有找到属性的情况下，才调用<font color="#ff0000">__getattr__</font>，已有的属性，比如<strong>name</strong>，不会在<font color="#ff0000">__getattr__</font>中查找。</p><p>此外，注意到任意调用如s.abc都会返回None，这是因为我们定义的<font color="#ff0000">__getattr__</font>默认返回就是None。要让class只响应特定的几个属性，我们就要按照约定，抛出AttributeError的错误：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">raise</span> AttributeError(<span class="string">'\'Student\' object has no attribute \'%s\''</span> % attr)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;python输入&quot;&gt;&lt;a href=&quot;#python输入&quot; class=&quot;headerlink&quot; title=&quot;python输入&quot;&gt;&lt;/a&gt;python输入&lt;/h4&gt;&lt;p&gt;如果要让用户从电脑输入一些字符怎么办？Python提供了一个raw_input，可以让用户输入字符串，并存放到一个变量里。&lt;br&gt;当你输入name = raw_input()并按下回车后，Python交互式命令行就在等待你的输入了。这时，你可以输入任意字符，然后按回车后完成输入。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;name = raw_input()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Michael&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;raw_input可以让你显示一个字符串来提示用户，于是我们把代码改成：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;name = raw_input(&lt;span class=&quot;string&quot;&gt;&#39;please enter your name: &#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;hello,&#39;&lt;/span&gt;, name&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="https://peihaibin.github.io/categories/Study/"/>
    
    
      <category term="python" scheme="https://peihaibin.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记 6</title>
    <link href="https://peihaibin.github.io/2017/09/28/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-6/"/>
    <id>https://peihaibin.github.io/2017/09/28/Python-学习笔记-6/</id>
    <published>2017-09-28T05:20:03.000Z</published>
    <updated>2017-09-28T07:22:52.997Z</updated>
    
    <content type="html"><![CDATA[<h4 id="python中数学运算"><a href="#python中数学运算" class="headerlink" title="python中数学运算"></a>python中数学运算</h4><p>Python 提供的基本数据类型 <strong>int、float</strong> 可以做整数和浮点的四则运算以及乘方等运算。<br>但是，四则运算不局限于int和float，还可以是有理数、矩阵等。<br>要表示有理数，可以用一个<strong>Rational</strong>类来表示：<br>如果要让<strong>Rational</strong>进行<strong>+运算</strong>，需要正确实现__add__。</p><p>请继续完善Rational类，实现四则运算。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#--*-- coding=utf-8 --*--</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span><span class="params">(object)</span>:</span>  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(self,a,b)</span>:</span></div><div class="line">        <span class="keyword">while</span> b:</div><div class="line">            a,b=b,a%b</div><div class="line">        <span class="keyword">return</span> a</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, p, q)</span>:</span></div><div class="line">        self.p = p/self.gcd(p,q)</div><div class="line">        self.q = q/self.gcd(p,q)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, r)</span>:</span></div><div class="line">        <span class="keyword">return</span> Rational(self.p * r.q + self.q * r.p, self.q * r.q)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sub__</span><span class="params">(self, r)</span>:</span></div><div class="line">        <span class="keyword">return</span> Rational(self.p*r.q - self.q * r.p, self.q * r.q)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__mul__</span><span class="params">(self, r)</span>:</span></div><div class="line">        <span class="keyword">return</span> Rational(self.p*r.p,self.q*r.q)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__div__</span><span class="params">(self, r)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.q*r.p == <span class="number">0</span>:a</div><div class="line">            <span class="keyword">return</span> <span class="string">'error'</span></div><div class="line">        <span class="keyword">return</span> Rational(self.p*r.q,self.q*r.p)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'%s/%s'</span> % (self.p, self.q)</div><div class="line">    __repr__ = __str__</div><div class="line">      </div><div class="line">r1 = Rational(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line">r2 = Rational(<span class="number">1</span>, <span class="number">4</span>)</div><div class="line"><span class="keyword">print</span> r1 + r2</div><div class="line"><span class="keyword">print</span> r1 - r2</div><div class="line"><span class="keyword">print</span> r1 * r2</div><div class="line"><span class="keyword">print</span> r1 / r2</div></pre></td></tr></table></figure></p><a id="more"></a><h4 id="python中类型转换"><a href="#python中类型转换" class="headerlink" title="python中类型转换"></a>python中类型转换</h4><p><strong>Rational</strong>类实现了有理数运算，但是，如果要把结果转为<strong> int</strong> 或 <strong>float </strong>怎么办？<br>如果要把<strong> Rational</strong> 转为 <strong>int</strong>，应该使用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">r = Rational(<span class="number">12</span>, <span class="number">5</span>)</div><div class="line">n = int(r)</div></pre></td></tr></table></figure><br>要让<strong>int()</strong>函数正常工作，需要实现特殊方法<font color="#ff0000">__int__()</font>。<br>同理，要让<strong>float()</strong>函数正常工作，需要实现特殊方法<strong>__float__()</strong>。</p><p>继续完善Rational，使之可以转型为float。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, p, q)</span>:</span></div><div class="line">        self.p = p</div><div class="line">        self.q = q</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__int__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.p // self.q</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__float__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> float(self.p) / self.q</div><div class="line"></div><div class="line"><span class="keyword">print</span> float(Rational(<span class="number">7</span>, <span class="number">2</span>))</div><div class="line"><span class="keyword">print</span> float(Rational(<span class="number">1</span>, <span class="number">3</span>))</div></pre></td></tr></table></figure></p><h4 id="python中-property"><a href="#python中-property" class="headerlink" title="python中 @property"></a>python中 @property</h4><p>使用 <strong>get/set</strong> 方法来封装对一个属性的访问在许多面向对象编程的语言中都很常见。<br>但是写 <strong>s.get_score()</strong> 和 <strong>s.set_score()</strong> 没有直接写 <strong>s.score </strong>来得直接。<br>有没有两全其美的方法？—-有。</p><p>因为Python支持高阶函数，在函数式编程中我们介绍了装饰器函数，可以用装饰器函数把 <strong>get/set </strong>方法“装饰”成属性调用。</p><p>给Student类加一个grade属性，根据 score 计算 A（&gt;=80）、B、C（<60） <figure="" class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.__score = score</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__score</div><div class="line"></div><div class="line"><span class="meta">    @score.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self, score)</span>:</span></div><div class="line">        <span class="keyword">if</span> score &lt; <span class="number">0</span> <span class="keyword">or</span> score &gt; <span class="number">100</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'invalid score'</span>)</div><div class="line">        self.__score = score</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grade</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.__score &gt;=<span class="number">80</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">'A'</span></div><div class="line">        <span class="keyword">elif</span> self.__score &gt;=<span class="number">60</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">'B'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">'C'</span></div><div class="line"></div><div class="line">s = Student(<span class="string">'Bob'</span>, <span class="number">59</span>)</div><div class="line"><span class="keyword">print</span> s.grade</div><div class="line"></div><div class="line">s.score = <span class="number">60</span></div><div class="line"><span class="keyword">print</span> s.grade</div><div class="line"></div><div class="line">s.score = <span class="number">99</span></div><div class="line"><span class="keyword">print</span> s.grade</div></pre></td></tr></table></60）></p><h4 id="python中-slots"><a href="#python中-slots" class="headerlink" title="python中 __slots__"></a>python中 __slots__</h4><p>由于Python是动态语言，任何实例在运行期都可以动态地添加属性。</p><p>如果要限制添加的属性，例如，Student类只允许添加 name、gender和score 这3个属性，就可以利用Python的一个特殊的<strong>__slots__</strong>来实现。<br><strong>__slots__</strong>的目的是限制当前类所能拥有的属性，如果不需要添加任意动态的属性，<br>使用<strong>__slots__</strong>也能节省内存。</p><p>使用<strong>__slots__</strong>要注意，<strong>__slots__</strong>定义的属性仅对当前类起作用，对继承的子类是不起作用的，<br>除非在子类中也定义<strong>__slots__</strong>，这样，子类允许定义的属性就是自身的<strong>__slots__</strong>加上父类的<strong>__slots__</strong>。</p><p>继承中的__slots__<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    __slots__ = (<span class="string">'name'</span>, <span class="string">'gender'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.gender = gender</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></div><div class="line"></div><div class="line">    __slots__ = (<span class="string">'score'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,gender,score)</span>:</span></div><div class="line">        super(Student,self).__init__(name,gender)</div><div class="line">        self.score = score</div><div class="line"></div><div class="line">s = Student(<span class="string">'Bob'</span>, <span class="string">'male'</span>, <span class="number">59</span>)</div><div class="line">s.name = <span class="string">'Tim'</span></div><div class="line">s.score = <span class="number">99</span></div><div class="line"><span class="keyword">print</span> s.score</div></pre></td></tr></table></figure></p><h4 id="python中-call"><a href="#python中-call" class="headerlink" title="python中 __call__"></a>python中 __call__</h4><p>在Python中，函数其实是一个对象。<br>所有的函数都是可调用对象。</p><p>一个类实例也可以变成一个可调用对象，只需要实现一个特殊方法<strong>__call__()</strong>。</p><p>改进一下前面定义的斐波那契数列，加一个<strong>__call__</strong>方法，让调用更简单：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self,num)</span>:</span></div><div class="line">        self.num = num</div><div class="line">        self.fib = []</div><div class="line">        <span class="keyword">if</span> self.num == <span class="number">0</span>:</div><div class="line">            <span class="keyword">print</span> str(num) + <span class="string">' is not correct!'</span></div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">elif</span> self.num == <span class="number">1</span>:</div><div class="line">            self.fib.append(<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.fib.append(<span class="number">0</span>)</div><div class="line">            self.fib.append(<span class="number">1</span>)</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,self.num):</div><div class="line">                self.fib.append(self.fib[i<span class="number">-1</span>] + self.fib[i<span class="number">-2</span>])</div><div class="line">        <span class="keyword">return</span> self.fib</div><div class="line">        </div><div class="line">f = Fib()</div><div class="line"><span class="keyword">print</span> f(<span class="number">10</span>)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;python中数学运算&quot;&gt;&lt;a href=&quot;#python中数学运算&quot; class=&quot;headerlink&quot; title=&quot;python中数学运算&quot;&gt;&lt;/a&gt;python中数学运算&lt;/h4&gt;&lt;p&gt;Python 提供的基本数据类型 &lt;strong&gt;int、float&lt;/strong&gt; 可以做整数和浮点的四则运算以及乘方等运算。&lt;br&gt;但是，四则运算不局限于int和float，还可以是有理数、矩阵等。&lt;br&gt;要表示有理数，可以用一个&lt;strong&gt;Rational&lt;/strong&gt;类来表示：&lt;br&gt;如果要让&lt;strong&gt;Rational&lt;/strong&gt;进行&lt;strong&gt;+运算&lt;/strong&gt;，需要正确实现__add__。&lt;/p&gt;
&lt;p&gt;请继续完善Rational类，实现四则运算。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#--*-- coding=utf-8 --*--&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Rational&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;gcd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self,a,b)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; b:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            a,b=b,a%b&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, p, q)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.p = p/self.gcd(p,q)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.q = q/self.gcd(p,q)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__add__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, r)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Rational(self.p * r.q + self.q * r.p, self.q * r.q)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__sub__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, r)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Rational(self.p*r.q - self.q * r.p, self.q * r.q)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__mul__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, r)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Rational(self.p*r.p,self.q*r.q)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__div__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, r)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; self.q*r.p == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:a&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Rational(self.p*r.q,self.q*r.p)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;%s/%s&#39;&lt;/span&gt; % (self.p, self.q)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    __repr__ = __str__&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;r1 = Rational(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;r2 = Rational(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; r1 + r2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; r1 - r2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; r1 * r2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; r1 / r2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="https://peihaibin.github.io/categories/Study/"/>
    
    
      <category term="python" scheme="https://peihaibin.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记 5</title>
    <link href="https://peihaibin.github.io/2017/09/28/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-5/"/>
    <id>https://peihaibin.github.io/2017/09/28/Python-学习笔记-5/</id>
    <published>2017-09-28T01:48:03.000Z</published>
    <updated>2017-09-28T05:15:26.357Z</updated>
    
    <content type="html"><![CDATA[<h4 id="python中继承一个类"><a href="#python中继承一个类" class="headerlink" title="python中继承一个类"></a>python中继承一个类</h4><p>一定要用 <font color="#ff0000">super(子类名, self).__init__(父类属性1, 父类属性2) </font>去初始化父类，否则，继承自 <b>父类</b> 的 <b>子类</b> 将没有 <b>父类属性</b>。<br>函数<b>super(子类名, self)</b>将返回当前类继承的父类，然后调用<b>__init__()</b>方法，<br>注意<font color="#ff0000">self参数已在super()中传入，在__init__()中将隐式传递，不需要写出（也不能写）</font>。</p><p>python中继承一个类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.gender = gender</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(Person)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, course)</span>:</span></div><div class="line">        super(Teacher,self).__init__(name,gender)</div><div class="line">        self.course = course</div><div class="line"></div><div class="line">t = Teacher(<span class="string">'Alice'</span>, <span class="string">'Female'</span>, <span class="string">'English'</span>)</div><div class="line"><span class="keyword">print</span> t.name</div><div class="line"><span class="keyword">print</span> t.course</div></pre></td></tr></table></figure></p><a id="more"></a><h4 id="python中判断类型"><a href="#python中判断类型" class="headerlink" title="python中判断类型"></a>python中判断类型</h4><p>函数<b>isinstance()</b>可以判断一个变量的类型，既可以用在Python内置的数据类型如<b>str、list、dict</b>，也可以用在我们自定义的类，它们本质上都是数据类型。<br>在继承链上，一个父类的实例不能是子类类型，因为子类比父类多了一些属性和方法。<br>在一条继承链上，一个实例可以看成它本身的类型，也可以看成它父类的类型。</p><h4 id="python中多态"><a href="#python中多态" class="headerlink" title="python中多态"></a>python中多态</h4><p>类具有继承关系，并且子类类型可以向上转型看做父类类型，如果我们从 <b>父类</b> 派生出<b>子类1</b>和<b>子类2</b>，并都写了一个 <b>whoAmI()</b> 方法：<br>在一个函数中，如果我们接收一个变量 <b>x</b>，则无论该 <b>x</b> 是 <b>父类</b> 、<b>子类1</b>还是 <b>子类2</b>，都可以正确打印出结果。<br>这种行为称为多态。也就是说，方法调用将作用在 <b>x</b> 的实际类型上。<br>子类总是先查找它自身的定义，如果没有定义，则顺着继承链向上查找，直到在某个父类中找到为止。<br>由于Python是动态语言，所以，传递给函数 <b>who_am_i(x)</b>的参数 <b>x</b> 不一定是 <b>父类</b> 或 <b>父类</b>的子类型。任何数据类型的实例都可以，只要它有一个<b>whoAmI()</b>的方法即可。<br>这是动态语言和静态语言（例如Java）最大的差别之一。动态语言调用实例方法，不检查类型，只要方法存在，参数正确，就可以调用。</p><p>尝试编写一个File-like Object<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span><span class="params">(object)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">r'["Tim", "Bob", "Alice"]'</span></div><div class="line">s = Students()</div><div class="line"></div><div class="line"><span class="keyword">print</span> json.load(s)</div></pre></td></tr></table></figure></p><h4 id="python中多重继承"><a href="#python中多重继承" class="headerlink" title="python中多重继承"></a>python中多重继承</h4><p>除了从一个父类继承外，Python允许从多个父类继承，称为多重继承。</p><p><b>多重继承的目的</b>是从两种继承树中分别选择并继承出子类，以便组合功能使用。</p><p>通过多重继承，请定义“会打篮球的学生”和“会踢足球的老师”。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'init Person'</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(Student,self).__init__()</div><div class="line">        <span class="keyword">print</span> <span class="string">'init Student'</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(Person)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(Teacher,self).__init__()</div><div class="line">        <span class="keyword">print</span> <span class="string">'init Teacher'</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SkillMixin</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'init SkillMixin'</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasketballMixin</span><span class="params">(SkillMixin)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">skill</span><span class="params">(self)</span>:</span></div><div class="line">        super(BasketballMixin,self).__init__()</div><div class="line">        <span class="keyword">return</span> <span class="string">'basketball'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FootballMixin</span><span class="params">(SkillMixin)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">skill</span><span class="params">(self)</span>:</span></div><div class="line">        super(FootballMixin,self).__init__()</div><div class="line">        <span class="keyword">return</span> <span class="string">'football'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BStudent</span><span class="params">(Student,BasketballMixin)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FTeacher</span><span class="params">(Teacher,FootballMixin)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">s = BStudent()</div><div class="line"><span class="keyword">print</span> s.skill()</div><div class="line"></div><div class="line">t = FTeacher()</div><div class="line"><span class="keyword">print</span> t.skill()</div></pre></td></tr></table></figure></p><h4 id="python中获取对象信息"><a href="#python中获取对象信息" class="headerlink" title="python中获取对象信息"></a>python中获取对象信息</h4><p><font color="#ff0000">当实例属性和类属性重名时，实例属性优先级高</font>，它将屏蔽掉对类属性的访问。<br>可见，千万不要在实例上修改类属性，它实际上并没有修改类属性，而是给实例绑定了一个实例属性。</p><h4 id="python中定义实例方法"><a href="#python中定义实例方法" class="headerlink" title="python中定义实例方法"></a>python中定义实例方法</h4><p>拿到一个变量，除了用 <strong>isinstance()</strong> 判断它是否是某种类型的实例外，还有没有别的方法获取到更多的信息呢？</p><ul><li>首先可以用<strong> type()</strong> 函数获取变量的类型，它返回一个 <strong>Type</strong> 对象。</li><li>其次，可以用 <strong>dir() </strong>函数获取变量的所有属性。<ul><li>对于实例变量，<strong>dir()</strong>返回所有实例属性，包括<strong><code>\_\_class\_\_</code></strong>这类有特殊意义的属性</li><li>如何去掉<code>\_\_xxx\_\_</code>这类的特殊属性，只保留我们自己定义的属性？回顾一下filter()函数的用法。</li><li>dir()返回的属性是字符串列表，如果已知一个属性名称，要获取或者设置对象的属性，就需要用 getattr() 和 setattr( )函数了。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, **kw)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.gender = gender</div><div class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> kw.iteritems():</div><div class="line">            setattr(self,k,v)</div><div class="line"></div><div class="line">p = Person(<span class="string">'Bob'</span>, <span class="string">'Male'</span>, age=<span class="number">18</span>, course=<span class="string">'Python'</span>)</div><div class="line"><span class="keyword">print</span> p.age</div><div class="line"><span class="keyword">print</span> p.course</div></pre></td></tr></table></figure><h4 id="Python中的特殊方法"><a href="#Python中的特殊方法" class="headerlink" title="Python中的特殊方法"></a>Python中的特殊方法</h4><h5 id="python中-str-和-repr"><a href="#python中-str-和-repr" class="headerlink" title="python中 __str__和__repr__"></a>python中 __str__和__repr__</h5><p>如果要把一个类的实例变成 str，就需要实现特殊方法<font color="#ff0000">__str__()</font>：<br> Python 定义了<strong>__str__()</strong>和<strong>__repr__()</strong>两种方法，<font color="#ff0000">__str__()</font>用于显示给用户，而<strong>__repr__()</strong>用于显示给开发人员。</p><p> 请给Student 类定义__str__和__repr__方法，使得能打印出<student: name,="" gender,="" score="">：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.gender = gender</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, score)</span>:</span></div><div class="line">        super(Student, self).__init__(name, gender)</div><div class="line">        self.score = score</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'(Student: %s, %s, %s)'</span> %(self.name,self.gender,self.score)</div><div class="line">    __repr__ = __str__</div><div class="line"></div><div class="line">s = Student(<span class="string">'Bob'</span>, <span class="string">'male'</span>, <span class="number">88</span>)</div><div class="line"><span class="keyword">print</span> s</div></pre></td></tr></table></figure></student:></p><h5 id="python中-cmp"><a href="#python中-cmp" class="headerlink" title="python中 __cmp__"></a>python中 __cmp__</h5><p>对<strong> int、str </strong>等内置数据类型排序时，Python的 <strong>sorted()</strong> 按照默认的比较函数 <strong>cmp</strong> 排序，但是，如果对一组 Student 类的实例排序时，就必须提供我们自己的特殊方法 <strong>__cmp__()</strong>。</p><p>请修改 Student 的 __cmp__ 方法，让它按照分数从高到底排序，分数相同的按名字排序。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.score = score</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'(%s: %s)'</span> % (self.name, self.score)</div><div class="line"></div><div class="line">    __repr__ = __str__</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__cmp__</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.score &lt; s.score:</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> self.score &gt; s.score:</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> self.name &lt; s.name:</div><div class="line">                <span class="keyword">return</span> <span class="number">-1</span> </div><div class="line">            <span class="keyword">elif</span> self.name &gt; s.name:</div><div class="line">                <span class="keyword">return</span> <span class="number">1</span></div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line">L = [Student(<span class="string">'Tim'</span>, <span class="number">99</span>), Student(<span class="string">'Bob'</span>, <span class="number">88</span>), Student(<span class="string">'Alice'</span>, <span class="number">99</span>)]</div><div class="line"><span class="keyword">print</span> sorted(L)</div></pre></td></tr></table></figure></p><h5 id="python中-len"><a href="#python中-len" class="headerlink" title="python中 __len__"></a>python中 __len__</h5><p>如果一个类表现得像一个list，要获取有多少个元素，就得用<strong> len()</strong> 函数。<br>要让<strong> len() </strong>函数工作正常，类必须提供一个特殊方法<font color="#ff0000">__len__()</font>，它返回元素的个数。<br>只要正确实现了<strong>__len__()</strong>方法，就可以用<strong>len()</strong>函数返回<strong>类实例</strong>的“长度”。</p><p>请编写一个Fib类，Fib(10)表示数列的前10个元素，print Fib(10) 可以打印出数列的前 10 个元素，len(Fib(10))可以正确返回数列的个数10。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num)</span>:</span></div><div class="line">        self.num = num</div><div class="line">        self.fib = []</div><div class="line">        <span class="keyword">if</span> self.num == <span class="number">0</span>:</div><div class="line">            <span class="keyword">print</span> str(num) + <span class="string">' is not correct!'</span></div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">elif</span> self.num == <span class="number">1</span>:</div><div class="line">            self.fib.append(<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.fib.append(<span class="number">0</span>)</div><div class="line">            self.fib.append(<span class="number">1</span>)</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,self.num):</div><div class="line">                self.fib.append(self.fib[i<span class="number">-1</span>] + self.fib[i<span class="number">-2</span>])</div><div class="line">                <span class="comment">#return fib</span></div><div class="line">        <span class="keyword">return</span> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> str(self.fib)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> len(self.fib)</div><div class="line"></div><div class="line">f = Fib(<span class="number">10</span>)</div><div class="line"><span class="keyword">print</span> f</div><div class="line"><span class="keyword">print</span> len(f)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;python中继承一个类&quot;&gt;&lt;a href=&quot;#python中继承一个类&quot; class=&quot;headerlink&quot; title=&quot;python中继承一个类&quot;&gt;&lt;/a&gt;python中继承一个类&lt;/h4&gt;&lt;p&gt;一定要用 &lt;font color=&quot;#ff0000&quot;&gt;super(子类名, self).__init__(父类属性1, 父类属性2) &lt;/font&gt;去初始化父类，否则，继承自 &lt;b&gt;父类&lt;/b&gt; 的 &lt;b&gt;子类&lt;/b&gt; 将没有 &lt;b&gt;父类属性&lt;/b&gt;。&lt;br&gt;函数&lt;b&gt;super(子类名, self)&lt;/b&gt;将返回当前类继承的父类，然后调用&lt;b&gt;__init__()&lt;/b&gt;方法，&lt;br&gt;注意&lt;font color=&quot;#ff0000&quot;&gt;self参数已在super()中传入，在__init__()中将隐式传递，不需要写出（也不能写）&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;python中继承一个类&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, name, gender)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.name = name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.gender = gender&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Teacher&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Person)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, name, gender, course)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        super(Teacher,self).__init__(name,gender)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.course = course&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;t = Teacher(&lt;span class=&quot;string&quot;&gt;&#39;Alice&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Female&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;English&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; t.name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; t.course&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="https://peihaibin.github.io/categories/Study/"/>
    
    
      <category term="python" scheme="https://peihaibin.github.io/tags/python/"/>
    
  </entry>
  
</feed>
